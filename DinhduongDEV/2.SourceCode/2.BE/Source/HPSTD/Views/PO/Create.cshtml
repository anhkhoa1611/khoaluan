@using HDBank.Core.Entities
@{
    ViewBag.Title = "Tạo đơn đặt hàng";
    var newData = new POHeader();
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 0px 0px !important;
        border: none !important;
    }

        .form-actions.right {
            text-align: right !important;
        }
</style>
<script src="~/Scripts/autoNumeric-min.js"></script>
<script src="~/Scripts/bootbox.min.js"></script>

<div class="row-fluid widget-box">
    <div class="span12">
        <div class="span2">
            <input type="text" id="txtSearch" class="span12" placeholder="Mã phiếu, tên phiếu" onkeyup="filterPYC()" />
        </div>
        <div class="span2">
            @*@Html.DropDownList("ma_nha_cung_cap", new SelectList(ViewBag.Vendor, "nha_cung_cap_id", "ten_nha_cung_cap"), "-- Chọn NCC --", new { style = "width:100%", onchange = "filterToTrinh()" })*@
            @(Html.Kendo().DropDownList()
                .Name("ma_nha_cung_cap")
                .DataTextField("ten_nha_cung_cap")
                .DataValueField("nha_cung_cap_id")
                .HtmlAttributes(new { @style = "width:100%;" })
                .Filter("contains")
                .OptionLabel("Nhà cung cấp")
                .Events(e =>
            {
                e.Change("filterToTrinh");
            })
                .BindTo(ViewBag.Vendor)
            )
        </div>
        <div class="span2">
            <input type="text" class="date-picker" placeholder="Từ ngày" name="from_date" id="from_date">
        </div>
        <div class="span2">
            <input type="text" class=" date-picker" placeholder="Đến ngày" name="to_date" id="to_date">
        </div>
        <div class="span2">
            <button type="button" id="btnSearch" class="btn btn-primary btn-small btnSearch" onclick="filterToTrinh()" style="float:none">Lọc dữ liệu</button>
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid">
            <div class="col-sm-6">
                <div class="row-fluid">
                    @(Html.Kendo()
                        .Grid<HDBank.Core.Entities.StatementDetail>()
                        .Name("grid")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.id)
                            .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                            .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
                            .Width(25).Filterable(false).Title("").Sortable(false);
                            //columns.Bound(p => p.ma_phieu_header).Width(90).Title("Mã phiếu");
                            columns.ForeignKey(p => p.ma_phieu_header, (System.Collections.IEnumerable)ViewBag.StatementHeader, "ma_phieu", "ma_phieu")
                            .Title("Mã phiếu").Width(160);
                            //columns.Bound(p => p.ma_san_pham).Width(90).Title("Mã sản phẩm");
                            columns.ForeignKey(p => p.ma_san_pham, (System.Collections.IEnumerable)ViewBag.listProduct, "ma_san_pham", "ten_san_pham")
                            .Title("Tên vật tư").Width(160);
                            columns.Bound(p => p.so_luong).Title("SL").Filterable(false).Width(75).Format("{0:N0}");
                            columns.Bound(p => p.don_gia).Title("Đơn giá").Filterable(false).Width(75).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "don_gia" });
                            columns.Bound(p => p.don_gia_vat).Title("Đơn giá VAT").Filterable(false).Width(90).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "don_gia_vat" });
                            columns.Bound(p => p.don_vi_tinh).Title("Đơn vi tính").Filterable(false).Hidden();
                            columns.Bound(p => p.thue_vat).Title("VAT").Filterable(false).Hidden();
                            columns.Bound(p => p.ma_don_vi).Title("Đơn Vị").Filterable(false).Hidden();
                            columns.Bound(p => p.ma_chi_nhanh).Title("Chi Nhánh").Filterable(false).Hidden();
                            columns.Bound(p => p.thanh_tien).Title("Chi phí(VAT)").Filterable(false).Width(180).Format("{0:N0}");
                            columns.Bound(p => p.dia_chi_don_vi).Title("Địa chỉ đơn Vị").Width(150);
                            columns.Bound(p => p.thong_tin_noi_bo).Title("Thông tin nội bộ").Width(150);
                            //columns.Bound(p => p.thong_so_ky_thuat).Title("Thông số kỹ thuật").Filterable(false).Width(220);
                            //columns.ForeignKey(p => p.ma_chi_nhanh, (System.Collections.IEnumerable)ViewBag.listDonVi, "ma_chi_nhanh", "ten_chi_nhanh")
                            //       .Title("Đơn vị").Width(160);
                            columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}");
                            columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
                            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}");
                            columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
                        })
                         .ToolBar(toolbar =>
                         {
                         toolbar.Template(@<text>

                        <div class="pull-left">
                            <a class="btn btn-info btn-mini" href="javascript:void(0)" onclick="Save()">
                                Tạo đơn đặt hàng
                            </a>
                        </div>

                        </text>);
                         })
                        .Sortable()
                        .Editable(edit => edit.Mode(GridEditMode.InCell))
                        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                        .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                        .Pageable(p => p
                        .Messages(m => m
                        .Display("{0}-{1} của {2} dòng")
                        .Empty("Không có dòng nào")
                        .ItemsPerPage("dòng trên trang")
                        .First("Trang kế")
                        .Last("Trang tiếp")
                        .Next("Đầu trang")
                        .Previous("Cuối trang")
                        )
                        )
                        .Scrollable()
                        .Events(e =>
                        {
                            e.DataBound("Databound");
                        })
                        .Navigatable()
                        .Reorderable(r => r.Columns(true))
                        .Resizable(r => r.Columns(true))
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(20)
                        //.Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                        .Model(model =>
                        {
                            model.Id(p => p.id);
                            model.Field(p => p.ma_phieu_header).Editable(false);
                            model.Field(p => p.ma_san_pham).Editable(false);
                            model.Field(p => p.so_luong).Editable(false);
                            model.Field(p => p.don_gia).Editable(false);
                            model.Field(p => p.don_gia_vat).Editable(false);
                            model.Field(p => p.thong_tin_noi_bo).Editable(true);
                            model.Field(p => p.dia_chi_don_vi).Editable(false);
                            model.Field(p => p.ngay_tao).Editable(false);
                            model.Field(p => p.nguoi_tao).Editable(false);
                            model.Field(p => p.ngay_cap_nhat).Editable(false);
                            model.Field(p => p.nguoi_cap_nhat).Editable(false);
                        })
                        .Read(read => read.Action("ReadStatement", "PO"))
                        ))
                    <br />
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    $(document).ready(function () {
        $('.date-picker').datepicker({ format: 'dd/mm/yyyy', autoclose: true, todayHighlight: true });
    })
    function Databound() {
        resizeGrid();
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 12);
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function filterToTrinh() {

        //if ($("#ma_don_vi").val() != "" && $("#ma_don_vi").val() != null) {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();

        var ncc = $('#ma_nha_cung_cap').val();

        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ma_phieu", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }

        if (ncc) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ma_nha_cung_cap", operator: "eq", value: ncc });
            filter.filters.push(filterOr);
        }

        var from_date = $('#from_date').val();
        if (from_date) {
            var from = from_date.trim().split("/");
            var startdate = new Date(from[2], from[1] - 1, from[0]);
            filter.filters.push({ field: "ngay_tao", operator: "gte", value: kendo.toString(startdate, 'yyyy-MM-dd') });
        }

        var to_date = $('#to_date').val();
        if (to_date) {
            var to = to_date.trim().split("/");
            var todate = new Date(to[2], to[1] - 1, to[0]);
            todate.setDate(todate.getDate() + 1);
            filter.filters.push({ field: "ngay_tao", operator: "lt", value: kendo.toString(todate, 'yyyy-MM-dd') });
        }

        grid.dataSource.filter(filter);
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function Save() {
        var checked = false;
        var details = [];

        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checked = true;
                var item = $('#grid').data('kendoGrid').dataItem($(this).closest("tr"));
                details.push({
                    ma_to_trinh: item.ma_phieu_header,
                    id_StatementDetail: item.id,
                    ma_san_pham: item.ma_san_pham,
                    so_luong: item.so_luong,
                    chi_phi: item.thanh_tien,
                    thong_so_ky_thuat: item.thong_so_ky_thuat,
                    don_gia: item.don_gia,
                    don_vi_tinh: item.don_vi_tinh,
                    don_gia_vat: item.don_gia_vat,
                    thue_vat: item.thue_vat,
                    don_gia: item.don_gia,
                    ma_don_vi: item.ma_don_vi,
                    ma_chi_nhanh: item.ma_chi_nhanh,
                    thong_tin_noi_bo: item.thong_tin_noi_bo,
                });
            }
        });


        if (checked == false) {
            $.gritter.add({
                title: '',
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
            return;
        }

        var data = new Object();
        data.ma_nha_cung_cap = $('#ma_nha_cung_cap').val();

        $.ajax({
            type: "POST",
            async: false,
            url: r + "/PO/CreateUpdate",
            data: { data: data, details: details },
            success: function (data) {
                if (data.success) {
                    window.location = r + "/PO/Edit?id=" + data.id;
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
            }
        });
    }

</script>