@model StockInHeader
@using HPSTD.Core.Entities
@{
    ViewBag.Title = "Chi tiết nhập kho";
    var newdata = new StockInHeader();
}

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

<form action="@Url.Content("~/StockIn/Update")" id="EditForm" method="post" enctype="multipart/form-data">
    <div class="row-fluid">
        <div class="span2">
            <input type="hidden" name="id" value="@Model.id" />
            <div class="control-group">
                <label>Số phiếu (*)</label>
                <div class="controls">
                    <input type="text" class="span12" placeholder="Số phiếu" name="ma_phieu" id="ma_phieu" readonly>
                </div>
            </div>
        </div>
        @*<div class="span2">
            <div class="control-group">
                <label>Tên phiếu (*)</label>
                <div class="controls">
                    <input type="text" class="span12" placeholder="Tên phiếu" name="ten_phieu" id="ten_phieu">
                </div>
            </div>
        </div>*@
        <div class="span2">
            <div class="control-group">
                <label>Nhà cung cấp(*)</label>
                @(Html.Kendo().DropDownList()
                .Name("ma_nha_cung_cap")
                .DataTextField("ten_nha_cung_cap")
                .DataValueField("nha_cung_cap_id")
                .HtmlAttributes(new { @style = "width:100%;" })
                .Filter("contains")
                .OptionLabel("NCC")
                .BindTo(ViewBag.Vendor)
                )
            </div>
        </div>
    </div>

    <div class="row-fluid">
        @(Html.Kendo()
        .Grid<HPSTD.Core.Entities.StockInDetail>()
        .Name("grid")
        .Columns(columns =>
        {
        columns.Bound(p => p.id).Hidden();
        //.HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
        //.ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
        //.Width(25).Filterable(false).Title("").Sortable(false);
        //columns.Bound(p => p.ma_phieu_header).Width(90).Title("Mã phiếu");
        //columns.Bound(p => p.ma_san_pham).Width(90).Title("Mã sản phẩm");
            @*if(ViewBag.StockInHeader.trang_thai != "DA_DUYET")
            {
                columns.Template(@<text></text>).HeaderHtmlAttributes(new { @style = "text-align: center" })
                .ClientTemplate("<span><a class='btn btn-mini btn-danger' onclick='removeDetail(#=id#)'><i class='fa fa-trash'></i></a></span>").Width(45);
            }*@
            columns.ForeignKey(p => p.ma_san_pham, (System.Collections.IEnumerable)ViewBag.listProduct, "ma_san_pham", "ten_san_pham")
            .Title("Tên vật tư").Width(160);
            columns.Bound(p => p.so_luong).Title("SL").Filterable(false).Width(75).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "so_luong" });
            columns.Bound(p => p.don_gia).Title("Đơn giá").Filterable(false).Width(100).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "don_gia" });
            columns.Bound(p => p.don_gia_vat).Title("Đơn giá VAT").Filterable(false).Width(100).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "don_gia_vat" });
            columns.Bound(p => p.don_vi_tinh).Title("Đơn vi tính").Filterable(false).Hidden();
            columns.Bound(p => p.thue_vat).Title("VAT").Filterable(false).Hidden();
            columns.Bound(p => p.chi_phi).Title("Chi phí(VAT)").Filterable(false).Width(100).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "chi_phi" });
            columns.Bound(p => p.so_luong_da_nhap).Title("SL đã nhâp").Filterable(false).Width(75).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "so_luong_da_nhap" });
            columns.Bound(p => p.so_luong_nhap).Title("SL nhập").Filterable(false).Width(75).Format("{0:N0}").HtmlAttributes(new { @style = "text-align:right", columnname = "so_luong_nhap" });
            columns.Bound(p => p.ngay_nhap).Title("Ngày nhập").Filterable(false).Width(120).HtmlAttributes(new { @style = "text-align:right", columnname = "ngay_nhap" });
            columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listTrangThai, "ma_tham_so", "gia_tri").Title("Trạng thái").Width(150);
            columns.Bound(p => p.ma_don_vi).Title("Đơn Vị").Filterable(false).Hidden();
            columns.Bound(p => p.ma_chi_nhanh).Title("Chi Nhánh").Filterable(false).Hidden();
            columns.Bound(p => p.dia_chi_don_vi).Title("Địa chỉ đơn Vị").Width(150);
            columns.Bound(p => p.thong_tin_noi_bo).Title("Thông tin nội bộ").Width(150);
            //columns.Bound(p => p.thong_so_ky_thuat).Title("Thông tin kỹ thuật").Filterable(false).Width(220);
            //columns.Bound(p => p.muc_dich_su_dung).Title("Mục đích sử dụng").Filterable(false).Width(180);
            //columns.ForeignKey(p => p.ma_don_vi, (System.Collections.IEnumerable)ViewBag.listDonVi, "ma_phan_cap", "ten_phan_cap")
            //.Title("Đơn vị").Width(160);
            columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { @style = "text-align:right", columnname = "ngay_tao" });
            columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { @style = "text-align:right", columnname = "ngay_sua" });
            columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
        })
            .ToolBar(toolbar =>
            {
            toolbar.Template(@<text>
                @if (ViewBag.StockInHeader.trang_thai != "NHAP_HOAN_TOAN")
                {
                    <div class="pull-left">
                        <a class="btn btn-info btn-mini" href="javascript:void(0)" onclick="NhapKho()">
                            Nhập kho
                        </a>
                    </div>

                }
            
            </text>);
            })
                .Sortable()
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                .Pageable(p => p
                .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
                )
                )
                .Scrollable()
                .Events(e =>
                {
                    e.DataBound("Databound");
                })
                .Editable(edit => edit.Mode(GridEditMode.InCell))
                .Navigatable()
                .Reorderable(r => r.Columns(true))
                .Resizable(r => r.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); events.Change("onChange"); })
                .Model(model =>
                {
                    if (ViewBag.StockInHeader.trang_thai != "NHAP_HOAN_TOAN")
                    {
                        model.Id(p => p.id);
                        model.Field(m => m.ma_san_pham).Editable(false);
                        model.Field(m => m.so_luong).Editable(false);
                        model.Field(m => m.so_luong_da_nhap).Editable(false);
                        model.Field(m => m.so_luong_nhap).Editable(true);
                        model.Field(m => m.ngay_nhap).Editable(true);
                        model.Field(m => m.don_gia).Editable(false);
                        model.Field(m => m.don_gia_vat).Editable(false);
                        model.Field(m => m.chi_phi).Editable(false);
                        model.Field(m => m.thong_tin_noi_bo).Editable(false);
                        model.Field(m => m.thong_so_ky_thuat).Editable(false);
                        model.Field(m => m.muc_dich_su_dung).Editable(false);
                        model.Field(m => m.nguoi_tao).Editable(false);
                        model.Field(m => m.ngay_tao).Editable(false);
                        model.Field(m => m.ngay_cap_nhat).Editable(false);
                        model.Field(m => m.nguoi_cap_nhat).Editable(false);
                        model.Field(m => m.trang_thai).Editable(false);
                        model.Field(m => m.dia_chi_don_vi).Editable(false);
                    }
                    else
                    {
                        model.Id(p => p.id);
                        model.Field(m => m.ma_san_pham).Editable(false);
                        model.Field(m => m.so_luong).Editable(false);
                        model.Field(m => m.so_luong_da_nhap).Editable(false);
                        model.Field(m => m.so_luong_nhap).Editable(false);
                        model.Field(m => m.ngay_nhap).Editable(false);
                        model.Field(m => m.don_gia).Editable(false);
                        model.Field(m => m.don_gia_vat).Editable(false);
                        model.Field(m => m.chi_phi).Editable(false);
                        model.Field(m => m.thong_tin_noi_bo).Editable(false);
                        model.Field(m => m.thong_so_ky_thuat).Editable(false);
                        model.Field(m => m.muc_dich_su_dung).Editable(false);
                        model.Field(m => m.nguoi_tao).Editable(false);
                        model.Field(m => m.ngay_tao).Editable(false);
                        model.Field(m => m.ngay_cap_nhat).Editable(false);
                        model.Field(m => m.nguoi_cap_nhat).Editable(false);
                        model.Field(m => m.dia_chi_don_vi).Editable(false);
                        model.Field(m => m.trang_thai).Editable(false);
                    }


                })
                .Read(read => read.Action("ReadDetail", "StockIn", new { @ma_phieu_header = Model.ma_phieu }))
                .Update(update => update.Action("Update", "StockIn").Data("GetData"))
                ))
        <br />
    </div>

</form>
<div id="popup-import-hd" class="modal hide" style="border: 0px solid rgba(0,0,0,0.2);">
    <form action="~/StockIn/CreateIn" method="post" id="importForm-HD" enctype="multipart/form-data" class="form-inline" style="margin:0px">
        <div class="k-window-titlebar k-header">
            <span class="k-window-title">Nhập hóa đơn</span>
        </div>
        <div class="modal-body overflow-visible">
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Số hóa đơn</label>
                        <div class="controls">
                            <input type="text" class="span12" name="so_hoa_don" id="so_hoa_don" value="" />
                        </div>
                    </div>
                </div>
            </div>
         
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Ngày hóa đơn</label>
                        <div class="controls">
                            <input type="text" class="span12 date-picker" placeholder="Ngày mua hàng" name="ngay_hoa_don" id="ngay_hoa_don">
                        </div>
                    </div>
                </div>
            </div>
           

        </div>
        <div class="modal-footer">
            <a class="btn btn-info btn-small" onclick="imporInvoice()"> Đồng ý</a>
            <a class="btn btn-default btn-small" data-dismiss="modal">Thoát</a>
        </div>
    </form>
</div>
<script>
    function GetData(){
        return{
            so_hoa_don: $("#so_hoa_don").val(),
            ngay_hoa_don: $("#ngay_hoa_don").val(),
            ma_phieu_header: "@Model.ma_phieu",
        }
    }
    function imporInvoice() {
        $('#importForm-HD').submit();
    }
    function NhapKho()
    {
        var tongtien=0;
        $.each($("#grid").data("kendoGrid").dataSource.data(), function () {
            tongtien += this.so_luong_nhap*this.don_gia_vat;
        });
        if(tongtien==0)
        {
            $.gritter.add({
                text: "Cần ít nhất 1 sản phẩm được nhập",
                class_name: 'gritter-error'
            });
            return;
        }
        $('#popup-import-hd').modal('show');
    }
    $(document).ready(function () {
        $('.date-picker').datepicker({ format: 'dd/mm/yyyy', autoclose: true, todayHighlight: true, startDate: 'today' });
        $("#importForm-HD").validate({
            rules: {
                'so_hoa_don': { required: true },
            },
            errorPlacement: function (error, element) {
            },
            submitHandler: function (form) {
                $("#importForm-HD").ajaxSubmit({
                    success: function (data) {
                        debugger;
                        if (data.success) {
                            $('#grid').data('kendoGrid').saveChanges();
                            $('#popup-import-hd').modal('hide');
                        }
                        else {
                            $.gritter.add({
                                text: data.error,
                                class_name: 'gritter-error'
                            });
                        }
                    }
                });
                return false;
            }
        });
    })
    function onChange(e) {
        if (e.action === "itemchange") {
            if (e.field == "so_luong_nhap") {
                var model = e.items[0];
                var so_luong_nhap = model.so_luong_nhap;
                var so_luong = model.so_luong;
                var so_luong_da_nhap = model.so_luong_da_nhap;
                var don_gia_vat = model.don_gia_vat;
                if (so_luong_nhap > so_luong - so_luong_da_nhap) {
                    so_luong_nhap = so_luong - so_luong_da_nhap;
                    model.set("so_luong_nhap", so_luong_nhap);
                }
                if (so_luong_nhap < 0) {
                    so_luong_nhap = 0;
                    model.set("so_luong_nhap", so_luong_nhap);
                }
               //var chiphi = numberFormat(so_luong_nhap * don_gia_vat);
               //model.set("chi_phi_nhap", chiphi);
            }
        }
    }
    $(document).ready(function () {
        var dropdownlist = $("#ma_nha_cung_cap").data("kendoDropDownList");
        dropdownlist.readonly();
        $("#ma_phieu").val('@ViewBag.StockInHeader.ma_phieu');
        @*$("#ten_phieu").val('@ViewBag.StockInHeader.ten_phieu');*@
        $('.date-picker').datepicker({ format: 'dd/mm/yyyy', autoclose: true, todayHighlight: true });
        $("#EditForm").validate({
            rules: {
                //'ten_phieu': { required: true },
            },
            errorPlacement: function (error, element) {
            },
            submitHandler: function (form) {
                var details = [];
                $.each($("#grid").data("kendoGrid").dataSource.data(), function () {
                    details.push({
                        id: this.id,
                        ma_pyc_header: this.ma_phieu_header,
                        ma_san_pham: this.ma_san_pham,
                        so_luong: this.so_luong,
                        tieu_chi_ky_thuat: this.tieu_chi_ky_thuat,
                        muc_dich_su_dung: this.muc_dich_su_dung,
                        thong_tin_noi_bo: this.thong_tin_noi_bo,
                    });
                });

                $(form).ajaxSubmit({
                    clearForm: false,
                    data: { details: details },
                    success: function (data) {
                        if (data.success) {
                            $("#grid").data("kendoGrid").dataSource.read({ ma_phieu_header: '@ViewBag.StockInHeader.ma_phieu' });
                            $.gritter.add({
                                text: "Lưu thành công",
                                class_name: 'gritter-success'
                            });
                            $('#ma_phieu_header').val(ma_phieu_header);
                        }
                        else {
                            $.gritter.add({
                                text: data.error,
                                class_name: 'gritter-error'
                            });
                        }
                    }
                });
                return false;
            }
        });


    })

    var Id;

    function Databound() {
        resizeGrid();
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 25);
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#gridDetail").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

</script>


<script>
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Nhập kho thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }

        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
</script>