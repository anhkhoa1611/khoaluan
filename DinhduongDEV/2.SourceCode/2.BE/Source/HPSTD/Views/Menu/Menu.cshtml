
@{
    ViewBag.Title = "Danh sách menu";
    var listIcon = new List<Object>();
    listIcon.Add(new { Name = "icon-cogs" });
    listIcon.Add(new { Name = "icon-hdd" });
    listIcon.Add(new { Name = "icon-user" });
    listIcon.Add(new { Name = "icon-smile" });
    listIcon.Add(new { Name = "icon-book" });
    listIcon.Add(new { Name = "icon-bullhorn" });
    listIcon.Add(new { Name = "icon-beer" });
    listIcon.Add(new { Name = "icon-leaf" });
    listIcon.Add(new { Name = "icon-ticket" });
    listIcon.Add(new { Name = "icon-time" });

    ViewBag.listIcon = listIcon;
    bool xem = ViewBag.accessDetail != null ? ViewBag.accessDetail.xem : false;
    bool sua = ViewBag.accessDetail != null ? ViewBag.accessDetail.sua : false;
    bool them = ViewBag.accessDetail != null ? ViewBag.accessDetail.them : false;
    bool xoa = ViewBag.accessDetail != null ? ViewBag.accessDetail.xoa : false;
    bool xuat = ViewBag.accessDetail != null ? ViewBag.accessDetail.xuat : false;
    bool nhap = ViewBag.accessDetail != null ? ViewBag.accessDetail.nhap : false;
}
<div class="row-fluid widget-box">
    <div class="span12">
        <div class="span4">
            <input type="text" class="span12" placeholder="Nhập tên chức năng..." onkeyup="filter(this)" />
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
        .Grid<HPSTD.Core.Entities.Menu>()
        .Name("grid")       
        .Columns(columns =>
        {
            columns.Bound(p => p.id)
                .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
                .Width(25).Filterable(false).Sortable(false);
            columns.Bound(p => p.ten_chuc_nang).Width(200).Title("Tên Menu").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.ForeignKey(p => p.ma_man_hinh, (System.Collections.IEnumerable)ViewBag.listScreen, "ma_man_hinh", "ten_man_hinh").EditorTemplateName("GridNullableForeignKey").Width(180).Title("Tên màn hình").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.ForeignKey(p => p.icon, (System.Collections.IEnumerable)ViewBag.listIcon, "Name", "Name").Width(80).Title("Icon").EditorTemplateName("TemplateIcon").ClientTemplate("<i class='#=icon#'></i>").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847; text-align: right" });
            columns.Bound(p => p.thu_tu).Width(100).Title("Thứ tự").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847; text-align: right" });
            columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
        })
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
            <div class="pull-left">
                @if (them)
                {
                    <a class="btn btn-success btn-mini" href="javascript:void(0)" id="btnGridAdd">Thêm</a>
                }
                @if (them || sua)
                {
                    <a class="btn btn-primary btn-mini" href="javascript:void(0)" id="btnGridSave">Lưu</a>
                    <a class="btn btn-default btn-mini" href="javascript:void(0)" id="btnGridCancel">Hủy</a>
                }
                @if (xoa)
                {
                    <a class="btn btn-danger btn-mini" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">Xóa</a>
                }
            </div>
        </text>);
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .ClientDetailTemplateId("template")
        .Sortable()
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Pageable(p => p
            .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
            )
        )
        .Scrollable()
        .Events(e => { e.DataBound("Databound"); e.DetailExpand("detailExpand"); })
        .Navigatable()
        .Reorderable(r => r.Columns(true))
        .Resizable(r => r.Columns(true))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Sort(x => x.Add("thu_tu"))
            .Batch(true)
            .PageSize(20)
            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .Model(model =>
        {
            model.Id(p => p.id);
            model.Field(p => p.id).Editable(false);
            model.Field(p => p.ngay_cap_nhat).Editable(false);
            model.Field(p => p.ngay_tao).Editable(false);
            model.Field(p => p.nguoi_tao).Editable(false);
            model.Field(p => p.nguoi_cap_nhat).Editable(false);
        })
        .Read(read => read.Action("Read", "Menu"))
        .Create(r => r.Action("Create", "Menu"))
        .Update(read => read.Action("Update", "Menu"))
        ))
    </div>
</div>

<script id="template" type="text/kendo-tmpl">
    <div class="row-fluid">
        @(Html.Kendo().Grid<HPSTD.Core.Entities.Menu>()
        .Name("grid-#=id#")
        .Columns(columns =>
        {
            columns.Bound(p => p.id)
                .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllDetail'  onClick='checkAllDetail(this)' />")
                .ClientTemplate("<input style='text-align:center' class='checkdetailid' type='checkbox' id='\\#=id\\#'/> ")
                .Width(25).Filterable(false).Sortable(false);
            columns.Bound(p => p.ten_chuc_nang).Width(250).Title("Tên menu").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" });
            columns.ForeignKey(p => p.ma_man_hinh, (System.Collections.IEnumerable)ViewBag.listScreen, "ma_man_hinh", "ten_man_hinh").EditorTemplateName("GridNullableForeignKey")
                .Title("Tên màn hình").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(200);
            columns.Bound(p => p.cap).Width(50).Title("Cấp").HtmlAttributes(new { columnname = "cap", style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71) "});
            columns.ForeignKey(p => p.id_cha, (System.Collections.IEnumerable)ViewBag.listMenu, "Value", "Text").EditorTemplateName("GridForeignKey_Dropdownlist")
                .Title("Tên menu cha").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(250);
            columns.Bound(p => p.thu_tu).Width(60).Title("Thứ tự").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
        })
        .Scrollable()
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
            <div class="pull-left">
                @if (them)
                {
                    <a class="btn btn-success btn-mini" href="javascript:void(0)" id="btnGridAddDetail" onclick="AddDetail()">Thêm</a>
                }
                @if (them || sua)
                {
                    <a class="btn btn-primary btn-mini" href="javascript:void(0)" id="btnGridSaveDetail" onclick="SaveDetail()">Lưu</a>
                    <a class="btn btn-default btn-mini" href="javascript:void(0)" id="btnGridCancelDetail" onclick="CancelDetail()">Hủy</a>
                }
                @if (xoa)
                {
                    <a class="btn btn-danger btn-mini" href="javascript:void(0)" id="btnGridDeleteDetail" onclick="showConfirmPopup(2)">Xóa</a>
                }
            </div>
        </text>);
        })
        .Events(events => { events.Edit("onEditDetail"); events.Save("OnSaveDetail"); })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Pageable(pager => pager.PageSizes(new[] { 100, 200, 300, 500 }))
        .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Pageable(p => p
            .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
            )
        )
        //.Events(events => { events.Edit("onEditDetail");})
        .Reorderable(reorderable => reorderable.Columns(true))
        .Resizable(resizable => resizable.Columns(true))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Sort(s =>
            {
                // s.Add("cap");
                s.Add("thu_tu");
            })
            .Batch(true)
            .PageSize(100)
            .Events(events => { events.Error("error_handlerDetail"); events.RequestEnd("onRequestEndDetail"); })
            .Model(model =>
            {
                model.Id(p => p.id);
                model.Field(p => p.id).Editable(false);
                model.Field(p => p.ngay_cap_nhat).Editable(false);
                model.Field(p => p.ngay_tao).Editable(false);
                model.Field(p => p.nguoi_tao).Editable(false);
                model.Field(p => p.nguoi_cap_nhat).Editable(false);
                model.Field(p => p.cap).DefaultValue(1);
            })
        .Read(c => c.Action("ReadDetail", "Menu", new { id = "#=id#" }))
        .Create(c => c.Action("CreateDetail", "Menu", new { id = "#=id#" }))
        .Update(c => c.Action("UpdateDetail", "Menu"))
        )
        .ToClientTemplate()
        )
    </div>

</script>
<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<script>
    var expandedRow, curunitid, deleteId;
    function detailExpand(e) {
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#grid').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        var dataItem = $('#grid').data('kendoGrid').dataItem(expandedRow);
        curunitid = dataItem.id;
    }
    $('#btnGridSave').click(function () {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    });
    $('#btnGridCancel').click(function () {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    });
    $('#btnGridAdd').bind('click', function () {
        $("#grid").data("kendoGrid").dataSource.insert();
    })

    function AddDetail() {
        if ($('#grid-' + curunitid).data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid-' + curunitid).data('kendoGrid').saveChanges();
        }
        $("#grid-" + curunitid).data("kendoGrid").dataSource.insert();
    }
    function SaveDetail() {
        if ($('#grid-' + curunitid).data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid-' + curunitid).data('kendoGrid').saveChanges();
        }
    }
    function CancelDetail() {
        $("#grid-" + curunitid).data("kendoGrid").dataSource.cancelChanges();
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function showConfirmPopup(e) {
        if (e == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu',
                    class_name: 'gritter-error'
                });
            }
        }
        else {
            var listrowid = "";
            $('#grid-' + curunitid).find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 2
                $("#divMaskPopup").show();
                $('#popup-confirm').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu',
                    class_name: 'gritter-error'
                });
            }
        }
    }
    function Delete() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/Menu/Delete", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
        else {
            var listrowid = "";
            $('#grid-' + curunitid).find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/Menu/DeleteDetail", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
    }
    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#grid-" + curunitid).find(".checkdetailid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 25);
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu dữ liệu thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }
        }
    }

    function error_handlerDetail(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }
    function onRequestEndDetail(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                if (e.response.Errors == null) {
                    $.gritter.add({
                        title: '',
                        text: 'Lưu thành công',
                        class_name: 'gritter-success'
                    });
                }
            }
        }
    }
    function filter(e) {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = e.value;
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ten_chuc_nang", operator: "contains", value: text });
            filterOr.filters.push({ field: "ma_man_hinh", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
        console.log(text)
    }

    function OnSaveDetail(e)
    {

    }

    function onEditDetail(e) {
        var dataItem = $("#grid-" + curunitid).data('kendoGrid').dataItem($(e.container).closest("tr"));
        var cap = dataItem.cap;
        $.ajax({
            type: "GET",
            async: false,
            url: r + "/Menu/GetAllMenu",
            data: { id: curunitid, currentlevel: cap },
            success: function (data) {
                if (data.success) {
                    datacap_do = data.data;
                }
            }
        });

        for (var i = 0; i < datacap_do.length; i++) {
            if (datacap_do[i].Value == dataItem.id) {
                datacap_do.splice(i, 1);
                break;
            }
        }

        var b = $("[aria-owns=id_cha_listbox]");
        if (b.length > 0) {
            var ds_cap_do = new kendo.data.DataSource();
            ds_cap_do.data(datacap_do);
            $("#id_cha").data("kendoDropDownList").setDataSource(ds_cap_do);
        }
    }

</script>
