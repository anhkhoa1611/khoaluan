@using HPSTD.Core.Entities
@{
    ViewBag.Title = "Tổng hợp kế hoạch năm";
}
<div class="row-fluid widget-box">
    <div class="span12">
        <input type="text" id="txtSearch" class="span3" placeholder="Kế hoạch năm, tên đơn vị..." onkeyup="filter()" />
    </div>
</div>
<div class="row-fluid">
    @(Html.Kendo()
    .Grid<HPSTD.Core.Entities.ReportPlan>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.nam_ke_hoach).Width(90).Title("Kế hoạch năm");
        columns.Bound(p => p.ten_chi_nhanh).Title("Tên đơn vị").Filterable(false).Width(200);
        columns.Bound(p => p.ten_san_pham).Title("Tên sản phẩm").Filterable(false).Width(150);
        columns.Bound(p => p.so_luong_du_kien).Title("Số lượng").Filterable(false).Width(110).Format("{0:N0}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.total_tien_du_kien).Title("Tổng tiền").Filterable(false).Width(100).Format("{0:N0}").HtmlAttributes(new { style = "text-align:right" }); ;
        columns.Bound(p => p.ke_hoach_nam_truoc).Title("Kế hoạch năm trươc").Filterable(false).Width(110).Format("{0:N0}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.thuc_hien_nam_truoc).Title("Thực hiện năm trươc").Filterable(false).Width(100).Format("{0:N0}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.chech_lech).Title("Chênh lệch").Filterable(false).Width(110).Format("{0:N0}").HtmlAttributes(new { style = "text-align:right" });
    })
    .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
    .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .Pageable(p => p
        .Messages(m => m
            .Display("{0}-{1} của {2} dòng")
            .Empty("Không có dòng nào")
            .ItemsPerPage("dòng trên trang")
            .First("Trang kế")
            .Last("Trang tiếp")
            .Next("Đầu trang")
            .Previous("Cuối trang")
        )
    )
    .Scrollable()
    .Events(e => { e.DataBound("Databound");})
    .Navigatable()
    .Resizable(r => r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .PageSize(20)
    //.Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
    .Model(model =>
    {
        model.Id(p => p.nam_ke_hoach);
    })

    .Read(read => read.Action("Read", "ReportPlan"))
    ))
</div>

<script>
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 25);
    }
    function filter() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "nam_ke_hoach", operator: "contains", value: text });
            filterOr.filters.push({ field: "ten_chi_nhanh", operator: "contains", value: text });
            filterOr.filters.push({ field: "ten_san_pham", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
    }
</script>