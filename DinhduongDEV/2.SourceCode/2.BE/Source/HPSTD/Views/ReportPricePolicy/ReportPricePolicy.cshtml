@using HPSTD.Core.Entities
@{
    ViewBag.Title = "Chi tiết chính sách giá";
    var newData = new ProductPriceDetail();
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 19px 10px !important;
    }

        .form-actions.right {
            text-align: right !important;
        }

    .k-alt .editable {
        background-color: #C8E6C9;
        color: black;
    }

    .editable {
        background-color: #E8F5E9;
        color: black;
    }
</style>
<script src="~/Scripts/autoNumeric-min.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<div class="row-fluid widget-box">
    <div class="span12">
        <input type="text" id="txtSearch" placeholder="Tên nhà cung cấp, ..." onkeyup="filter()" />
        <select name="select" id="nha_cung_cap_search" class='chosen-select span4' data-placeholder="Chọn nhà cung cấp..." multiple onchange="filter()">
            @foreach (var item in ViewBag.listVendor)
            {
                <option value="@item.nha_cung_cap_id">@Html.Raw(item.ten_nha_cung_cap)</option>
            }
        </select>

        @*<select onchange="filter()" name="ma_san_pham" class="span12" id="ma_san_pham_search">
                <option value="">--Sản phẩm--</option>
                @foreach (var item in ViewBag.listProduct)
                {
                    <option value="@item.ma_san_pham">@Html.Raw(item.ten_san_pham)</option>
                }
            </select>*@
        <select name="select" id="ma_san_pham_search" class='chosen-select span4' data-placeholder="Chọn sản phẩm..." multiple onchange="filter()">
            @foreach (var item in ViewBag.listProduct)
            {
                <option value="@item.ma_san_pham">@Html.Raw(item.ten_san_pham)</option>
            }
        </select>

    </div>
</div><div>
    <div class="row-fluid">

        @(Html.Kendo()
            .Grid<HPSTD.Core.Entities.ProductPriceReport>()
                .Name("gridDetail")
                .Columns(columns =>
                {
                    columns.Bound(p => p.ma_chinh_sach_gia)
                       .Title("Chính sách giá").Width(100);
                    columns.Bound(p => p.ten_nha_cung_Cap)
                  .Title("Tên nhà cung cấp").Width(400);
                    columns.ForeignKey(p => p.ma_vat_tu, (System.Collections.IEnumerable)ViewBag.listProduct, "ma_san_pham", "ten_san_pham")
                    .Title("Tên hàng hóa, dịch vụ").Width(250).EditorTemplateName("GridNullableForeignKey")
                    .HtmlAttributes("style='cursor:pointer; color:#040001;'").HtmlAttributes(new { columnname = "vat_tu" });
                    columns.Bound(p => p.ma_vat_tu).HtmlAttributes(new { columnname = "ma_vat_tu" }).Title("Mã hàng hóa, dịch vụ").Width(140);
                    columns.ForeignKey(p => p.don_vi_tinh, (System.Collections.IEnumerable)ViewBag.listDonViTinh, "ma_tham_so", "gia_tri")
                    .Title("Đơn vị tính").Width(150)
                    .HtmlAttributes("style='cursor:pointer; color:#040001;'").HtmlAttributes(new { columnname = "don_vi_tinh" });
                    columns.Bound(p => p.sl_min).Width(100).Title("SL tối thiểu").HtmlAttributes(new { columnname = "sl_min" }).Format("{0:N0}"); ;
                    columns.Bound(p => p.sl_max).Width(100).Title("SL tối đa").HtmlAttributes(new { columnname = "sl_max" }).Format("{0:N0}"); ;
                    columns.Bound(p => p.gia_bao).Width(140).Title("Giá báo").HtmlAttributes(new { columnname = "gia_bao" }).Format("{0:N0}"); ;
                    columns.Bound(p => p.thue_vat).Width(80).Title("Thuế VAT").HtmlAttributes(new { columnname = "thue_vat" }).Format("{0:N0} %"); ; ;
                    columns.Bound(p => p.gia_bao_gom_vat).Width(140).Title("Giá bao gồm VAT").Format("{0:N0}"); ;
                    columns.Bound(p => p.ngay_ap_dung).Title("Ngày áp dụng").Filterable(false).Width(120).Format("{0:dd/MM/yyyy}").EditorTemplateName("Date").HtmlAttributes(new { columnname = "ngay_ap_dung" });
                    columns.Bound(p => p.ngay_ket_thuc).Title("Ngày kết thúc").Filterable(false).Width(120).Format("{0:dd/MM/yyyy}").EditorTemplateName("Date").HtmlAttributes(new { columnname = "ngay_ket_thuc" });

                })
                 .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                .Pageable(p => p
                .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
                )
                )
                .Scrollable()
                .Events(e => { e.DataBound("onDatabound"); })
                .Navigatable()
                .Reorderable(r => r.Columns(true))
                .Resizable(r => r.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .Model(model =>
                {
                    model.Field(p => p.thue_vat).DefaultValue(10);
                    model.Field(p => p.don_vi_tinh).Editable(false);
                    model.Field(p => p.gia_bao_gom_vat).Editable(false);
                    model.Field(p => p.ngay_cap_nhat).Editable(false);
                    model.Field(p => p.ngay_tao).Editable(false);
                    model.Id(p => p.id);
                })
                    .Read(read => read.Action("Read", "ReportPricePolicy"))
                ))

    </div>
</div>
<script>
    $('#nha_cung_cap_search,#ma_san_pham_search').chosen();
    function onDatabound(e) {
        resizeGrid();
    }
    //BaoHV add
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.success) {
            }
            else {
                $.gritter.add({
                    title: '',
                    text: e.response.error,
                    class_name: 'gritter-error'
                });
            }

        }
    }
    function filter() {
        grid = $("#gridDetail").data("kendoGrid");
        var filter = { logic: "and", filters: [] };

        var text = $("#txtSearch").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ten_nha_cung_Cap", operator: "contains", value: text });
            filterOr.filters.push({ field: "so_hop_dong", operator: "contains", value: text });
            filterOr.filters.push({ field: "ma_chinh_sach_gia", operator: "contains", value: text });
            filterOr.filters.push({ field: "ma_vat_tu", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        //var ncc = $("#nha_cung_cap_search").val();
        //var fillterncc = { logic: "or", filters: [] };
        //if (ncc != '') {
        //    fillterncc.filters.push({ field: "nha_cung_cap_id", operator: "eq", value: ncc });
        //    filter.filters.push(fillterncc);
        //}

        var ncc = $("#nha_cung_cap_search option:selected");
        var fillterncc = { logic: "or", filters: [] };
        if (ncc.length > 0) {
            for (var i = 0; i < ncc.length; i++) {
                var option = ncc[i].value;
                if (option != '') {
                    fillterncc.filters.push({ field: "nha_cung_cap_id", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterncc);
        }

        //var msp = $("#ma_san_pham_search").val();
        //var filltermsp = { logic: "or", filters: [] };
        //if (msp != '') {
        //    filltermsp.filters.push({ field: "ma_vat_tu", operator: "eq", value: msp });
        //    filter.filters.push(filltermsp);
        //}
        var msp = $("#ma_san_pham_search option:selected");
        var filltermsp = { logic: "or", filters: [] };
        if (msp.length > 0) {
            for (var i = 0; i < msp.length; i++) {
                var option = msp[i].value;
                if (option != '') {
                    filltermsp.filters.push({ field: "ma_vat_tu", operator: "eq", value: option });
                }
            }
            filter.filters.push(filltermsp);
        }
        grid.dataSource.filter(filter);
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#gridDetail').offset().top);
        var gridElement = $("#gridDetail"),
            dataArea = gridElement.find(".k-grid-content"),
            otherElements = gridElement.children().not(".k-grid-content"),
            otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 25);
    }

</script>