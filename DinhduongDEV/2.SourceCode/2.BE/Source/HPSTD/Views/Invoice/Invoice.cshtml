@using HPSTD.Core.Entities
@{
    ViewBag.Title = "Thanh toán";
    var newData = new InvoiceHeader();
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 0px 0px !important;
        border: none !important;
    }

        .form-actions.right {
            text-align: right !important;
        }
</style>
<script src="~/Scripts/autoNumeric-min.js"></script>
<script src="~/Scripts/bootbox.min.js"></script>
<div class="row-fluid widget-box">
    <div class="span12">
        <div class="span4">
            <input type="text" class="span12" placeholder="Mã phiếu" onkeyup="filter(this)" />
        </div>
    </div>
</div>



<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid">
            <div class="col-sm-6">
                <div class="tabbable">
                    <ul class="nav nav-tabs tab-color-blue" id="myTab"></ul>
                    <div class="tab-content" style="padding-bottom:0px!important">
                        <div id="home" class="tab-pane fade active in">
                            <div class="row-fluid">
                                @(Html.Kendo()
                                .Grid<HPSTD.Core.Entities.InvoiceHeader>()
                                .Name("grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.id)
                                    .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                                    .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
                                    .Width(25).Filterable(false).Sortable(false);
                                    @*columns.Template(@<text></text>).HtmlAttributes(new { style = "text-align: center;" })
                                           .ClientTemplate("<span ><a class='btn btn-mini btn-warning' style ='width:40px' href=" + Url.Action("Edit", "StockIn", new { @id = "#=id#" }) + " > Sửa </a></span> ").Width(80);*@
                                columns.Template(@<text></text>).HtmlAttributes(new { style = "text-align: center;" })
                                                       .ClientTemplate("<div><span ><a class='btn btn-mini btn-warning' style ='width:40px' href=" + Url.Action("Edit", "Invoice", new { @id = "#=id#" }) + " > Chi tiết </a></span> </div>"
                                                              ).Width(80);
                                    columns.Bound(p => p.ma_phieu_nhap_kho).ClientTemplate("<span>#=ma_phieu_nhap_kho#</span>").Title("Số phiếu").Width(110);
                                    columns.Bound(p => p.ma_hoa_don).Title("Số hóa đơn").Width(110);
                                    columns.Bound(p => p.ngay_hoa_don).Title("Ngày hóa đơn").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { @style = "text-align:right" });
                                    columns.Bound(p => p.ten_don_vi).Title("Đơn vị").Width(160);
                                    //columns.Bound(p => p.ghi_chu).Title("Ghi chú").Width(160);
                                    columns.Bound(p => p.trang_thai).Width(120).Title("Trạng thái").ClientTemplate("#if(trang_thai=='MOI'){#<span class='btn btn-danger btn-mini'>Mới</span>#}else{#Hoàn thành mua sắm#}#");
                                    //columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listTrangThai, "ma_tham_so", "gia_tri").Title("Trạng thái").Width(150);
                                    columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { @style = "text-align:right" });
                                    columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
                                    columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { @style = "text-align:right" });
                                    columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
                                })
                                .ToolBar(toolbar =>
                                {
                                    toolbar.Custom().Text("Kết thúc mua sắm")
                                       .HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:void(0)", @onclick = "ConfirmFinish()" });
                                })
                                .Sortable()
                                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                                .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                .Pageable(p => p
                                .Messages(m => m
                                .Display("{0}-{1} của {2} dòng")
                                .Empty("Không có dòng nào")
                                .ItemsPerPage("dòng trên trang")
                                .First("Trang kế")
                                .Last("Trang tiếp")
                                .Next("Đầu trang")
                                .Previous("Cuối trang")
                                )
                                )
                                .Scrollable()
                                .Events(e =>
                                {
                                    e.DataBound("Databound");
                                })
                                .Navigatable()
                                .Reorderable(r => r.Columns(true))
                                .Resizable(r => r.Columns(true))
                                .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(20)
                                .Model(model =>
                                {
                                    model.Id(p => p.id);
                                })

                                .Read(read => read.Action("Read", "Invoice"))
                                ))
                            </div>

                        </div>
                        <div id="edit" class="tab-pane fade">
                            <div class="span12 formEdit">

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="DeleteList()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>

<script>

    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function Databound() {
        resizeGrid();
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 25);
    }

    function filter(e) {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = e.value;
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ma_phieu_nhap_kho", operator: "contains", value: text });
            filterOr.filters.push({ field: "ten_phieu_nhap_kho", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
    }

    function showConfirmPopup(e) {
        if (e == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu',
                    class_name: 'gritter-error'
                });
            }
        }
        else {
        }
    }
    function ConfirmFinish() {
        var listrowid = "";

        var isHaveKetThuc = false;
        $('#grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
                var id = $(this).attr("id");
                var result = $.grep($("#grid").data("kendoGrid").dataSource.data(), function (e) { return e.id == id });
                if (result[0].trang_thai == "KET_THUC_MUA_SAM")
                {
                    isHaveKetThuc = true;
                }
                
            }
        });
        if (isHaveKetThuc)
        {
            $.gritter.add({
                title: '',
                text: 'Chỉ xác nhận với trạng thái thanh toán mới!',
                class_name: 'gritter-error'
            });
            return;
        }
       
        if (listrowid != "" && listrowid != null) {
            $.post(r + "/Invoice/ConfirmFinish", { data: listrowid }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        text: "Kết thúc mua sắm thành công",
                        class_name: 'gritter-success'
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    $.gritter.add({
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
            });
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
        }

    }
    function DeleteList() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/PO/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
    }
</script>