
@using HDBank.Core.Entities
@{
    bool xem = ViewBag.accessDetail != null ? ViewBag.accessDetail.xem : false;
    bool sua = ViewBag.accessDetail != null ? ViewBag.accessDetail.sua : false;
    bool them = ViewBag.accessDetail != null ? ViewBag.accessDetail.them : false;
    bool xoa = ViewBag.accessDetail != null ? ViewBag.accessDetail.xoa : false;
    bool xuat = ViewBag.accessDetail != null ? ViewBag.accessDetail.xuat : false;
    bool nhap = ViewBag.accessDetail != null ? ViewBag.accessDetail.nhap : false;

    ViewBag.Title = "Mẫu email gửi";
    var newData = new EmailContent();
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 19px 10px !important;
    }

        .form-actions.right {
            text-align: right !important;
        }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid">
            <div class="col-sm-6">
                <div class="tabbable">
                    <ul class="nav nav-tabs tab-color-blue" id="myTab">
                        <li class="active">
                            <a data-toggle="tab" href="#home" aria-expanded="true" id="tabList">
                                <i class="green ace-icon fa fa-home bigger-120"></i>
                                Danh sách email mẫu
                            </a>
                        </li>
                        <li class="">
                            <a data-toggle="tab" href="#edit" aria-expanded="false" id="tabAdd" style="display:none;">
                                Thêm email mẫu
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content" style="padding-bottom:0px!important">

                        <div id="home" class="tab-pane fade active in">
                            <div class="row-fluid widget-box">
                                <div class="span12">
                                    <div class="span4">
                                        <input type="text" class="span12" placeholder="Tiêu đề, mail đến, mail cc, mail bcc .." onkeyup="filter(this)" />
                                    </div>
                                </div>
                            </div>
                            <div class="row-fluid">
                                @(Html.Kendo()
                                .Grid<HDBank.Core.Entities.EmailContent>()
                                .Name("grid")
                                //.HtmlAttributes(new { @style = "height:500px" })
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.id)
                                             .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                                             .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
                                             .Width(25).Filterable(false).Sortable(false);
                                    columns.Bound(p => p.tieu_de).Width(200).Title("Tiêu đề").ClientTemplate("<span style='cursor:pointer; color:\\#040001' onclick='edit(this)'>#=tieu_de#</span>");
                                    columns.Bound(p => p.mailTo).Width(140).Title("Gửi đến");
                                    columns.Bound(p => p.mailCc).Width(140).Title("CC");
                                    columns.Bound(p => p.mailBcc).Width(140).Title("BCC");
                                    columns.ForeignKey(p => p.mau_email, (System.Collections.IEnumerable)ViewBag.listEmailTemplate, "ma_tham_so", "gia_tri").Title("Mẫu").Width(180);
                                    columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}");
                                    columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
                                    columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}");
                                    columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
                                })
                                .ToolBar(toolbar =>
                                {
                                toolbar.Template(@<text>
                                    <div class="pull-left">
                                        @if (them)
                                        {
                                            <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                                                Thêm
                                            </a>
                                        }
                                    </div>
                                </text>);
                                })
                                    .Sortable()
                                    .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                                    .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                    .Pageable(p => p
                                    .Messages(m => m
                                    .Display("{0}-{1} của {2} dòng")
                                    .Empty("Không có dòng nào")
                                    .ItemsPerPage("dòng trên trang")
                                    .First("Trang kế")
                                    .Last("Trang tiếp")
                                    .Next("Đầu trang")
                                    .Previous("Cuối trang")
                                    )
                                    )
                                    .Scrollable()
                                    .Events(e => { e.DataBound("Databound"); })
                                    .Navigatable()
                                    .Reorderable(r => r.Columns(true))
                                    .Resizable(r => r.Columns(true))
                                    .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.id);
                                    })

                                    .Read(read => read.Action("Read", "Emailtemplate"))
                                    ))
                                </div>

                        </div>
                        <div id="edit" class="tab-pane fade">
                            <div class="span12 formEdit">

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
<script src="~/Scripts/jquery.validate.js"></script>
<script type="text/template" id="EditTemplate">
    <form action="@Url.Content("~/Emailtemplate/CreateUpdate")" id="EditForm" method="post" enctype="multipart/form-data">
        <div class="row-fluid">
            <div class="span3">
                <input name="id" value="#=id#" type="hidden" />
                <div class="control-group">
                    <label>Tiêu đề</label>
                    <div class="controls">
                        <input type="text" class="span12" placeholder="Tiêu đề" name="tieu_de" value="#=tieu_de!=null ? tieu_de : ''#">
                    </div>
                </div>
            </div>
            <div class="span2">
            <div class="control-group">
                <label>Mail To</label>
                <div class="controls">
                    <input type="text" class="span12" placeholder="mail To" name="mailTo" value="#=mailTo!=null ? mailTo : ''#">
                </div>
            </div>
        </div>
            <div class="span2">
                <div class="control-group">
                    <label>Mail Cc</label>
                    <div class="controls">
                        <input type="text" class="span12" placeholder="mail Cc" name="mailCc" value="#=mailCc!=null ? mailCc : ''#">
                    </div>
                </div>
            </div>
            <div class="span2">
                <div class="control-group">
                    <label>Mail Bcc</label>
                    <div class="controls">
                        <input type="text" class="span12" placeholder="mail Bcc" name="mailTo" value="#=mailBcc!=null ? mailBcc : ''#">
                    </div>
                </div>
            </div>
            <div class="span3">
                <div class="control-group">
                    <label>Mẫu</label>
                    <div class="controls">
                       <select class="span12" name="mau_email" data-placeholder="Chọn mẫu">
                           @foreach(var item in ViewBag.listEmailTemplate)
                           {
                               <option value="@item.ma_tham_so">@Html.Raw(item.gia_tri)</option>
                           }
                       </select>
                    </div>
                </div>
            </div>

        </div>
        <div class="row-fluid">
            <div class="span12">
                <div class="control-group">
                    <label>Nội dung</label>
                    <div class="controls">
                        <div class="clearfix">
                            @(Html.Kendo().Editor().Name("noi_dung")
                            .Value("#=noi_dung !=null? noi_dung : ''#")
                            .Encode(false)
                            .HtmlAttributes(new { style = "height:350px;width:100%;", placeholder = "Nội dung" })
                            .Tools(tools => tools
                            .Clear()
                            .Bold().Italic().Underline().Strikethrough()
                            .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                            .InsertUnorderedList().InsertOrderedList()
                            .Outdent()
                            .Indent()
                            .CreateLink().Unlink()
                            //.InsertImage()
                            .InsertFile()
                            .SubScript()
                            .SuperScript()
                            .TableEditing()
                            .ViewHtml()
                            .Formatting()
                            .CleanFormatting()
                            .FontColor()
                            .BackColor()
                            //.CustomTemplate(template => template.Template("<a class='k-button' onclick='onFullScreen(this)'>" + Html.Raw(Resources.Global._full_screen) + "</a><a class='k-button' onclick='show_popup_selectimage()'>" + Html.Raw(Resources.Global._select_image) + "</a>")))
                            //.Messages(m => m
                            //    .ImageWebAddress(@Resources.Global._image_addr)
                            //    .DialogCancel(@Resources.Global._cancel)
                            //    .DialogInsert(@Resources.Global._add)
                            //)
                            //.FileBrowser(fileBrowser => fileBrowser
                            //.File(@HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + "/Content/Upload/docs/{0}")
                            //.Read("Read", "FileBrowser")
                            //.Create("Create", "FileBrowser")
                            //.Destroy("Destroy", "FileBrowser")
                            //.Upload("Upload", "FileBrowser")
                            ).ToClientTemplate()
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row-fluid">
        </div>
        <div class="form-actions right">
            <a onclick="clearForm()" class="btn btn-mini">Hủy</a>
            #if(id > 0){#
            <a onclick="removeUser('#=id#')" class="btn btn-danger btn-mini">Xóa</a>
            #}#
            <button type="submit" class="btn btn-info btn-mini">Lưu</button>
            <a onclick="saveAndClear()" class="btn btn-primary btn-mini">Lưu &amp; Mới</a>
        </div>

    </form>
</script>
<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<script>
    function showConfirmPopup(e) {
        if (e == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm2').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu',
                    class_name: 'gritter-error'
                });
            }
        }
    }
    function Delete2(key) {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/EmailConfig/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm2').modal('hide');
                });
            }
        }
        else {
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
    function clearForm() {
        loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
    }
    function loadForm(data) {
        var EditTemplate = kendo.template($("#EditTemplate").html());
        $(".formEdit").html(EditTemplate(data));
        loadValidate(data);
    }
    $.validator.setDefaults({ ignore: ":hidden:not(select)" })
    function loadValidate() {
        $("#EditForm").validate({
            rules: {
                'tieu_de': { required: true },
                'noi_dung': { required: true },
                'mailTo': { required: true },
                'mau_email': { required: true }
            },
            errorPlacement: function (error, element) {
            },
            submitHandler: function (form) {
                $(form).ajaxSubmit({
                    clearForm: false,
                    success: function (data) {
                        if (data.success) {
                            $("#grid").data("kendoGrid").dataSource.read()
                            $.gritter.add({
                                text: "Lưu thành công",
                                class_name: 'gritter-success'
                            });
                            if (reset) {
                                reset = false;
                                loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
                            }
                        }
                        else {
                            $.gritter.add({
                                text: data.error,
                                class_name: 'gritter-error'
                            });
                        }

                    }
                });
                return false;
            }
        });
    }
    function edit(e) {
        var data = $("#grid").data("kendoGrid").dataItem($(e).closest("tr"));
        $("#tabAdd").trigger("click");
        $('#tabAdd').css('display', 'block');
        $('#tabAdd').text('').append('Chỉnh sửa email mẫu')
        loadForm(data);
        $('select[name ="mau_email"]').val(data.mau_email);
    }
    $("#tabList").bind('click', function () {
        //$('#tabAdd').text('').append('Thêm email mẫu')
        $('#tabAdd').css('display', 'none');
    });
    @*$("#tabAdd").bind('click', function () {
        loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
    });*@

    $('#btnGridAdd').bind('click', function () {
        $('#tabAdd').css('display', 'block');
        $('#tabAdd').text('').append('Thêm email mẫu')
        $("#tabAdd").trigger("click");
        loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
    })

    var reset = false;
    function saveAndClear() {
        reset = true;
        $('#EditForm').submit();
    }
    var Id;
    function removeUser(id) {
        $('#popup-confirm').modal('show');
        Id = id;
    }
    function Delete() {
        $.post(r + "/Emailtemplate/Delete", { id: Id }, function (data) {
            if (data.success) {
                $.gritter.add({
                    text: "Xóa thành công",
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read();
                loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
            } else {
                $.gritter.add({
                    text: data.error,
                    class_name: 'error-success'
                });
            }
        })
    }
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 12);
    }
    function filter(e) {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = e.value;
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "tieu_de", operator: "contains", value: text });
            filterOr.filters.push({ field: "mailTo", operator: "contains", value: text });
            filterOr.filters.push({ field: "mailCc", operator: "contains", value: text });
            filterOr.filters.push({ field: "mailBcc", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
        console.log(text)
    }
</script>


