@using HDBank.Core.Entities
@{
    ViewBag.Title = "Kế hoạch năm";
    var newData = new PlanHeader();
    var listActive = new List<SelectListItem>
    {
        new SelectListItem{Text = "Mới", Value = "MOI"},
        new SelectListItem{Text = "Đã duyệt", Value = "DA_DUYET"},
    };
    ViewBag.listActive = listActive;
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 19px 10px !important;
    }

        .form-actions.right {
            text-align: right !important;
        }

    .k-alt .editable {
        background-color: #C8E6C9;
        color: black;
    }

    .editable {
        background-color: #E8F5E9;
        color: black;
    }
</style>
<script src="~/Scripts/autoNumeric-min.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<div class="row-fluid widget-box">
    <div class="span12">
        <input type="text" id="txtSearch" class="span3" placeholder="Kế hoạch năm, tên đơn vị..." onkeyup="filter()" />

        <select name="select" id="listStatus" class='chosen-select span3' data-placeholder="Trạng thái..." multiple onchange="filter()">
            @foreach (var item in ViewBag.listActive)
            {
                <option value="@item.Value">@item.Text</option>
            }
        </select>
    </div>
</div>
<div class="row-fluid">
    @(Html.Kendo()
                            .Grid<HDBank.Core.Entities.PlanHeader>()
                            .Name("grid")
                            .Columns(columns =>
                            {
                                columns.Bound(p => p.id)
                                    .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllDetail'  onClick='checkAllDetail(this)' />")
                                    .ClientTemplate("<input style='text-align:center' class='checkdetailid' type='checkbox' id='#=id#'/> ")
                                    .Width(25).Filterable(false).Sortable(false);
                                columns.Bound(p => p.nam_ke_hoach).Width(200).Title("Kế hoạch năm").
                                ClientTemplate("<span style='cursor:pointer; color:\\#040001' onclick='edit(this)'>#=ten_ke_hoach# - #=nam_ke_hoach#</span>");
                                //columns.Bound(p => p.ten_ke_hoach).Width(100).Title("Tên kế hoạch").HtmlAttributes(new { @class = "editable" });
                                columns.ForeignKey(p => p.don_vi_phu_trach, (System.Collections.IEnumerable)ViewBag.listDonviPhuTrach, "ma_chi_nhanh", "ten_chi_nhanh").
                                EditorTemplateName("GridNullableForeignKey").Title("Đơn vị").Width(200);
                                columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listActive, "Value", "Text").Title("Trạng thái")
                                .Width(120).EditorTemplateName("GridNullableForeignKey");
                                columns.Bound(p => p.ghi_chu).Title("Ghi chú").Filterable(false).Width(90);
                                columns.Bound(p => p.nguoi_duyet).Title("Người duyệt").Filterable(false).Width(90);
                                columns.Bound(p => p.ngay_duyet).Title("Ngày duyệt").Filterable(false).Width(90).Format("{0:dd/MM/yyyy}").HtmlAttributes(new { style = "text-align:right" }); ;

                                columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                                columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
                                columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                                columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
                            })
                            .ToolBar(s =>
                            {
                                //s.Custom().Text("Thêm")
                                //    .HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:void(0)", @onclick = "Create()" });
                                //s.Custom().Text("Lưu")
                                //    .HtmlAttributes(new { @class = "btn btn-primary", @Href = "javascript:void(0)", @onclick = "Save()" });
                                //s.Custom().Text("Hủy")
                                //    .HtmlAttributes(new { @class = "btn btn-default", @Href = "javascript:void(0)", @onclick = "Cancel()" });
                                s.Custom().Text("Tạo kế hoạch")
                                .HtmlAttributes(new { @class = "btn btn-primary", @Href = "javascript:void(0)", @onclick = "showConfirmPopupImport()" });
                                s.Custom().Text("Duyệt")
                                 .HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:void(0)", @onclick = "showConfirmPopup(2)" });
                                s.Custom().Text("Xuất dữ liệu")
                                    .HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:void(0)", @onclick = "ExportData()" });
                                s.Custom().Text("Tải Excel mẫu").HtmlAttributes(new { @class = "btn btn-primary" }).Url(Url.Action("ExportTeamplate", "Plan"));
                                s.Custom().Text("Xóa")
                                  .HtmlAttributes(new { @class = "btn btn-danger", @Href = "javascript:void(0)", @onclick = "showConfirmPopup(1)" });


                            })
                            // .Editable(editable => editable.Mode(GridEditMode.InCell))
                            //.Sortable()
                            .ClientDetailTemplateId("template")
                            .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                            .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                            .Pageable(p => p
                                .Messages(m => m
                                    .Display("{0}-{1} của {2} dòng")
                                    .Empty("Không có dòng nào")
                                    .ItemsPerPage("dòng trên trang")
                                    .First("Trang kế")
                                    .Last("Trang tiếp")
                                    .Next("Đầu trang")
                                    .Previous("Cuối trang")
                                )
                            )
                            .Scrollable()
                            .Events(e => { e.DataBound("Databound"); e.DetailExpand("detailExpand"); })
                            .Navigatable()
                            .Resizable(r => r.Columns(true))
                            .Excel(excel => excel
                            .FileName("Plan.xlsx")
                            .Filterable(true).AllPages(true)
                            .ProxyURL(Url.Action("Excel_Export", "Users")))
                            .Reorderable(r => r.Columns(true))
                            .Resizable(r => r.Columns(true))

                            .DataSource(dataSource => dataSource
                                .Ajax()
                                //.Sort(s =>
                                //{
                                //    s.Add("ma_phan_cap");
                                //})
                                .Batch(true)
                                .PageSize(20)
                                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                            .Model(model =>
                            {
                                model.Id(p => p.id);
                                model.Field(p => p.id).Editable(false);
                                model.Field(p => p.trang_thai).DefaultValue("DANG_HOAT_DONG");
                                model.Field(p => p.ngay_cap_nhat).Editable(false);
                                model.Field(p => p.ngay_tao).Editable(false);
                                model.Field(p => p.nguoi_tao).Editable(false);
                                model.Field(p => p.nguoi_cap_nhat).Editable(false);
                            })

                            .Read(read => read.Action("Read", "Plan"))
                            .Create(read => read.Action("Create", "Plan"))
                            .Update(read => read.Action("Update", "Plan"))
                             ))
</div>
<script id="template" type="text/kendo-tmpl">
    <div class="row-fluid">
        @(Html.Kendo().Grid<HDBank.Core.Entities.PlanDetail>()
        .Name("grid-#=id#")
        .Columns(columns =>
        {
            columns.Bound(p => p.id)
                .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllDetail2'  onClick='checkAllDetail2(this)' />")
                .ClientTemplate("<input style='text-align:center' class='checkdetailid' type='checkbox' id='\\#=id\\#'/> ")
                .Width(25).Filterable(false).Sortable(false);
            columns.ForeignKey(p => p.ma_san_pham, (System.Collections.IEnumerable)ViewBag.listProduct, "id", "ten_san_pham").EditorTemplateName("GridNullableForeignKey")
                .Title("Dịch vụ").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(150).HtmlAttributes(new { columnname = "ma_san_pham" });
            columns.ForeignKey(p => p.don_vi_phu_trach, (System.Collections.IEnumerable)ViewBag.listDonviPhuTrach, "ma_chi_nhanh", "ten_chi_nhanh").EditorTemplateName("GridNullableForeignKey")
               .Title("Đơn vị phụ trách").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(150).Hidden();
            columns.ForeignKey(p => p.ma_don_vi_tinh, (System.Collections.IEnumerable)ViewBag.listDonviTinh, "ma_tham_so", "gia_tri").EditorTemplateName("GridNullableForeignKey")
                 .Title("Đơn vị tính").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(150).HtmlAttributes(new { columnname = "ma_don_vi_tinh" }); ;
            //columns.Bound(p => p.ma).Width(90).Title("Cấp").HtmlAttributes(new { columnname = "cap", style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71) " });
            //   columns.ForeignKey(p => p.id_cha, (System.Collections.IEnumerable)ViewBag.listMenu, "Value", "Text").EditorTemplateName("GridForeignKey_Dropdownlist")
            //       .Title("Tên menu cha").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" }).Width(150);
            columns.Bound(p => p.so_luong_du_kien).Width(90).Title("SL dự kiến").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            // columns.Bound(p => p.ma_don_vi_tinh).Width(90).Title("Đơn vị tính").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.don_gia_du_kien_vat).Width(120).Title("Đơn giá VAT").Format("{0:N0}").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" }).HtmlAttributes(new { columnname = "don_gia_du_kien_vat" });
            columns.Bound(p => p.total_tien_du_kien).Width(120).Title("Tổng tiền").Format("{0:N0}").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" }).HtmlAttributes(new { columnname = "total_tien_du_kien" });
            columns.Bound(p => p.ke_hoach_nam_truoc).Width(120).Title("Kế hoạch năm trước").Format("{0:N0}").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.thuc_hien_nam_truoc).Width(120).Title("Thực hiện năm trước").Format("{0:N0}").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.chech_lech).Width(120).Title("Chênh lệch").Format("{0:N0}").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.ghi_chu).Width(140).Title("Ghi chú").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71); text-align: right" });
            columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
        })
        .Scrollable()
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
            <div class="pull-left">
                <a class="btn btn-success btn-mini" href="javascript:void(0)" id="btnGridAddDetail" onclick="AddDetail()">Thêm</a>
                <a class="btn btn-primary btn-mini" href="javascript:void(0)" id="btnGridSaveDetail" onclick="SaveDetail()">Lưu</a>
                <a class="btn btn-default btn-mini" href="javascript:void(0)" id="btnGridCancelDetail" onclick="CancelDetail()">Hủy</a>
                <a class="btn btn-danger btn-mini" href="javascript:void(0)" id="btnGridDeleteDetail" onclick="showConfirmPopup(3)">Xóa</a>
            </div>
        </text>);
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Pageable(pager => pager.PageSizes(new[] { 100, 200, 300, 500 }))
        .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Pageable(p => p
            .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
            )
        )
        .Events(events => { events.Save("onSaveDetail"); })
        .Reorderable(reorderable => reorderable.Columns(true))
        .Resizable(resizable => resizable.Columns(true))
        .DataSource(dataSource => dataSource
            .Ajax()
            //.Sort(s =>
            //{
            //    // s.Add("cap");
            //    s.Add("thu_tu");
            //})
            .Batch(true)
            .PageSize(100)
            .Events(events => { events.Error("error_handlerDetail"); events.RequestEnd("onRequestEndDetail"); ; events.Change("onChangeDetail"); })
            .Model(model =>
            {
                model.Id(p => p.id);
                model.Field(p => p.id).Editable(false);
                model.Field(p => p.ma_don_vi_tinh).Editable(false);
                model.Field(p => p.ngay_cap_nhat).Editable(false);
                model.Field(p => p.ngay_tao).Editable(false);
                model.Field(p => p.nguoi_tao).Editable(false);
                model.Field(p => p.nguoi_cap_nhat).Editable(false);
            })
        .Read(c => c.Action("ReadDetail", "Plan", new { id = "#=id#" }))
        .Create(c => c.Action("CreateDetail", "Plan", new { id = "#=id#" }))
        .Update(c => c.Action("UpdateDetail", "Plan"))
        )
        .ToClientTemplate()
        )
    </div>

</script>
<div id="popup-import" class="modal hide">
    <form action="~/Plan/Import" method="post" id="importForm" enctype="multipart/form-data" class="form-inline" style="margin:0px">
        <div class="k-window-titlebar k-header">
            <span class="k-window-title">Thông báo</span>
        </div>
        <div class="modal-body overflow-visible">
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Tên kế hoạch năm</label>
                        <div class="controls">
                            <input type="text" class="span12" placeholder="Tên kế hoạch" name="ten_ke_hoach" value="KẾ HOẠCH MUA SẮM NĂM" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Đơn vị</label>
                        <div class="controls">
                            <select class='select' name="don_vi_phu_trach">
                                @foreach (var item in ViewBag.listDonviPhuTrach)
                                {
                                    <option value="@item.ma_chi_nhanh">@item.ten_chi_nhanh</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Chọn năm tạo kế hoạch </label>
                        <div class="controls">
                            <select id='nam_ke_hoach' name="nam_ke_hoach" class='select' style="width:220px">
                                <option value="">Năm</option>
                                @for (int z = 2017; z <= 2100; z++)
                                {
                                    <option value="@z"> @z</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label>Ghi chú</label>
                        <div class="controls">
                            <input type="text" class="span12" placeholder="Ghi chú" name="ghi_chu" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid form-group">
                <input name="FileUpload" type="file" id="FileUpload" />
                <label>Chọn file </label>
            </div>
        </div>
        <div class="modal-footer">
            <a class="btn btn-info btn-small" onclick="Import()"> Đồng ý</a>
            <a class="btn btn-default btn-small" data-dismiss="modal">Thoát</a>
        </div>
    </form>
</div>
<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa kế hoạch mua sắm năm này?</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<div id="popup-confirm3" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa?</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="DeleteDetail()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<div id="popup-confirm2" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Duyệt kế hoạch năm</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <label>Nội dung duyệt</label>
                <input class="span12" type="text" id="ghi_chu_popup" name="ghi_chu" />
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Approved()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Thoát</a>
    </div>
</div>

<script>
    var expandedRow, curunitid, deleteId;
    function detailExpand(e) {
        showDetailButon('');
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#grid').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        var dataItem = $('#grid').data('kendoGrid').dataItem(expandedRow);
        curunitid = dataItem.id;
        if (dataItem.trang_thai == "DA_DUYET") {
            showDetailButon('none');
        }
    }
    function showDetailButon(status) {
        $('#btnGridAddDetail').css('display', status);
        $('#btnGridSaveDetail').css('display', status);
        $('#btnGridCancelDetail').css('display', status);
        $('#btnGridDeleteDetail').css('display', status);
    }

    function AddDetail() {
        if ($('#grid-' + curunitid).data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid-' + curunitid).data('kendoGrid').saveChanges();
        }
        $("#grid-" + curunitid).data("kendoGrid").dataSource.insert();
    }
    function SaveDetail() {
        if ($('#grid-' + curunitid).data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid-' + curunitid).data('kendoGrid').saveChanges();
        }
    }
    function CancelDetail() {
        $("#grid-" + curunitid).data("kendoGrid").dataSource.cancelChanges();
    }
    function checkAllDetail2(e) {
        var x = $(e).prop('checked');
        $("#grid-" + curunitid).find(".checkdetailid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function error_handlerDetail(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }
    function onRequestEndDetail(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu thành công',
                    class_name: 'gritter-success'
                });
            }
        }
    }
    //
    $("#listStatus").chosen();

    function showConfirmPopup(e) {
        if (e == 1) {
            var listrowid = "";
            $('#grid').find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu muốn xóa',
                    class_name: 'gritter-error'
                });
            }
        }
        else if (e == 2) {
            var listrowid = "";
            $('#grid').find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm2').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu muốn duyệt',
                    class_name: 'gritter-error'
                });
            }
        }
        else if (e == 3) {
            var listrowid = "";
            $("#grid-" + curunitid).find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm3').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu liệu muốn xóa',
                    class_name: 'gritter-error'
                });
            }
        }
    }
    function DeleteDetail() {
        var listrowid = "";
        $('#grid-' + curunitid).find(".checkdetailid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            $.post(r + "/Plan/DeleteDetail", { data: listrowid }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        text: "Xóa thành công",
                        class_name: 'gritter-success'
                    });
                    $('#grid-' + curunitid).data("kendoGrid").dataSource.read();
                }
                else {
                    $.gritter.add({
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
                $('#popup-confirm3').modal('hide');
            });
        }
    }
    function Approved() {
        var listrowid = "";
        $('#grid').find(".checkdetailid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            $.post(r + "/Plan/Approved", { data: listrowid, ghi_chu: $('#ghi_chu_popup').val() }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        text: "Duyệt thành công!",
                        class_name: 'gritter-success'
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    $.gritter.add({
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
                $('#popup-confirm2').modal('hide');
            });
        }
    }
    function ExportData() {
        var listrowid = "";
        $('#grid').find(".checkdetailid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            window.open(r + "/Plan/ExportData?listids=" + listrowid, "_self");
        }
        else {
            $.gritter.add({
                text: "Vui lòng chọn kế hoạch để xuât",
                class_name: 'gritter-error'
            });
        }
    }
    function Delete() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/Plan/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
        else {
        }
    }
    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkdetailid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    function filter() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "nam_ke_hoach", operator: "contains", value: text });
            filterOr.filters.push({ field: "ten_ke_hoach", operator: "contains", value: text });
            filterOr.filters.push({ field: "don_vi_phu_trach", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }

        var listStatus = $("#listStatus option:selected");
        var fillterStatus = { logic: "or", filters: [] };
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var option = listStatus[i].value;
                if (option != '') {
                    fillterStatus.filters.push({ field: "trang_thai", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterStatus);
        }
        grid.dataSource.filter(filter);
    }
</script>

@* Import *@
<script>
    $(document).ready(function () {
        $('#FileUpload').ace_file_input({
            no_file: 'Chưa chọn tập tin ...',
            btn_choose: 'Chọn',
            btn_change: 'Thay đổi',
            droppable: false,
            onchange: null,
            thumbnail: false, //| true | large
            allowExt: ['gif', 'png', 'jpg', 'jpeg', 'xlsx', 'xls', 'doc', 'docx', 'pdf'],
            denyExt: ['exe', 'php'],
            maxSize: 5120000,
            //onchange:''
            before_change: function (files, dropped) {
                var allowed_files = [];
                for (var i = 0 ; i < files.length; i++) {
                    var file = files[i];
                    if (typeof file === "string") {
                        //IE8 and browsers that don't support File Object
                        if (!(/\.(xlsx|xls)$/i).test(file))
                            //if (!(/\.(jpe?g|png|gif|bmp|doc|docx|xlsx|xls|pdf)$/i).test(file))
                            return false;
                    }
                    else {
                        var type = $.trim(file.type);
                        var isValidLength = type.length > 0;
                        var isApplication = (/^application\/(pdf|msword|vnd.openxmlformats-officedocument.spreadsheetml.sheet)$/i).test(type);
                        //var isValidFileName = (/\.(jpe?g|png|gif|bmp|doc|docx|xlsx|xls|pdf)$/i).test(file.name);
                        var isValidFileName = (/\.(xlsx|xls)$/i).test(file.name);
                        //var isImage = (/^image\/(jpe?g|png|gif|bmp)$/i).test(type);
                        if (isValidLength) {
                            if (!isApplication && !isValidFileName) {
                                alert('Sai định dạng file(*.xlsx,*.xls): ' + file.name);
                                continue;
                            }
                        } else {
                            continue;
                        }
                    }

                    allowed_files.push(file);
                }
                if (allowed_files.length === 0) return false;
                return allowed_files;
            }
        });
    });
    function Create() {
        $("#grid").data("kendoGrid").dataSource.insert();
    }
    function Save() {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu dữ liệu thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }

        }
    }
    function Import() {
        $('#importForm').submit();
    }
    function showConfirmPopupImport(e) {
        $('#popup-import').modal('show');
    }
    function onCloseForm() {
        $('#txtcontent').val('');
        $('.modal').modal('hide');
    }
    $("#importForm").validate({
        submitHandler: function (form) {
            $("#importForm").ajaxSubmit({
                uploadProgress: function (event, position, total, percentComplete) { },
                success: function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        if (data.totalError > 0) {
                            $.gritter.add({
                                title: 'Lỗi',
                                text: "Có dòng lỗi, tải về để sửa lại.",
                                class_name: 'gritter-error'
                            });
                            window.open(r + "/ExcelImport/" + data.link, "_blank");
                        }
                        else {
                            $.gritter.add({
                                title: '',
                                text: "Nhập thành công " + data.total + " trang",
                                class_name: 'gritter-success',
                                button: 'zzz'
                            });
                        }
                        $('#FileUpload').ace_file_input('reset_input');
                    } else {
                        $.gritter.add({
                            title: '',
                            text: "Báo lỗi " + data.message,
                            class_name: 'gritter-error',
                            button: 'zzz'
                        });
                    }
                    onCloseForm();
                }
            });
        },
    });

    function onChangeDetail(e) {
        var model = e.items[0];
        if (model != null) {
            if (flagload) {
                $.ajax({
                    type: "GET",
                    async: false,
                    url: r + "/Plan/GetProduct",
                    data: { ma_san_pham: model.ma_san_pham },
                    success: function (data) {
                        if (data.success) {
                            model.ma_don_vi_tinh = data.data.don_vi_tinh;
                            model.don_gia_du_kien_vat = data.data.gia_bao_gom_vat;
                            $('#grid-' + curunitid).find("tr[data-uid='" + model.uid + "'] td[columnname='don_gia_du_kien_vat']").text(currency2String(model.don_gia_du_kien_vat));
                            var grid = $("#grid-" + curunitid).data("kendoGrid");
                            grid.refresh();
                        }
                    }
                });
            }

            model.total_tien_du_kien = model.so_luong_du_kien * model.don_gia_du_kien_vat;
            $('#grid-' + curunitid).find("tr[data-uid='" + model.uid + "'] td[columnname='total_tien_du_kien']").text(currency2String(model.total_tien_du_kien));
        }
    }

    function currency2String(value) {
        return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
    }

    var flagload = false;
    function onSaveDetail(e) {
        flagload = false;
        if (e.container.attr('columnname') == 'ma_san_pham') {
            flagload = true;
        }
    }
</script>