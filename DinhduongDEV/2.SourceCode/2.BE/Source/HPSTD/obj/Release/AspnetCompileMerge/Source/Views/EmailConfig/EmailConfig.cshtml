@using HDBank.Core.Entities
@{
    bool xem = ViewBag.accessDetail != null ? ViewBag.accessDetail.xem : false;
    bool sua = ViewBag.accessDetail != null ? ViewBag.accessDetail.sua : false;
    bool them = ViewBag.accessDetail != null ? ViewBag.accessDetail.them : false;
    bool xoa = ViewBag.accessDetail != null ? ViewBag.accessDetail.xoa : false;
    bool xuat = ViewBag.accessDetail != null ? ViewBag.accessDetail.xuat : false;
    bool nhap = ViewBag.accessDetail != null ? ViewBag.accessDetail.nhap : false;
    
    ViewBag.Title = "Cấu hình email";
    var newData = new Emails();
    var listActive = new List<SelectListItem>
    {
        new SelectListItem{Text = "Hoạt động", Value = "true"},
        new SelectListItem{Text = "Ngưng hoạt động", Value = "false"},
    };
    ViewBag.listActive = listActive;    
}
<style>
    .form-actions {
        background: 0 0 !important;
        padding: 19px 10px !important;
    }

    .form-actions.right {
        text-align: right !important;
    }

    .k-alt .editable {
        background-color: #C8E6C9;
        color: black;
    }

    .editable {
        background-color: #E8F5E9;
        color: black;
    }
</style>
<script src="~/Scripts/jquery.validate.js"></script>
<div class="row-fluid widget-box">
    <div class="span12">
        <div class="span4">
            <input type="text" id ="txtSearch" class="span12" placeholder="Nhập email, mail server .." onkeyup="filter()" />
        </div>
    </div>
</div>
<div class="row-fluid">
    @(Html.Kendo()
    .Grid<HDBank.Core.Entities.Emails>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.id)
                   .HeaderTemplate("<input type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' ")
                   .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=id#'/> ")
                   .Width(25).Filterable(false).Sortable(false).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(p => p.email).Width(150).Title("Địa chỉ email gửi").HtmlAttributes(new { @class = "editable" });
        // columns.Bound(p => p.password).Width(100).Title("Mật khẩu").ClientTemplate("<input type='password' name = 'password' id= 'password' style ='width:74px; height:14px' value = '#=password#'/> ").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.password).Width(100).Title("Mật khẩu").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.port).Width(100).Title("Cổng").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.mail_server).Width(140).Title("Máy chủ email").HtmlAttributes(new { @class = "editable" });
        //columns.Bound(p => p.enable_ssl).Width(70).Title("Bật SSL").ClientTemplate("#if(enable_ssl){#<input type='checkbox' id= 'chkSSL' checked />  #}else{#<input type='checkbox' id= 'chkSSL'/> #}#'").HtmlAttributes(new { @class = "editable", @style = "text-align:center" });
        //columns.Bound(p => p.is_default).Width(70).Title("Mặc định").ClientTemplate("#if(is_default){#<input type='checkbox' id= 'chkDfl' checked />  #}else{#<input type='checkbox' id= 'chkDfl'/> #}#'").HtmlAttributes(new { @class = "editable", @style = "text-align:center" });
        
        columns.Bound(p => p.enable_ssl).Width(70).Title("Bật SSL").ClientTemplate("#if(enable_ssl){#x#}else{# #}#").HtmlAttributes(new { @class = "editable", @style = "text-align:center" });
        columns.Bound(p => p.is_default).Width(70).Title("Mặc định").ClientTemplate("#if(is_default){#x#}else{# #}#").HtmlAttributes(new { @class = "editable", @style = "text-align:center" });
           
        columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listActive, "Value", "Text").Title("Trạng thái").Width(150).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
        columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);

    })
    .ToolBar(s =>
    {
        if (them)
        {
            s.Custom().Text("Thêm")
               .HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:void(0)", @onclick = "Create()" });
        }
        if (them || sua)
        {
            s.Custom().Text("Lưu")
                .HtmlAttributes(new { @class = "btn btn-primary", @Href = "javascript:void(0)", @onclick = "Save()" });
            s.Custom().Text("Hủy")
                .HtmlAttributes(new { @class = "btn btn-default", @Href = "javascript:void(0)", @onclick = "Cancel()" });
        }
        if (xoa)
        {
            s.Custom().Text("Xóa")
                 .HtmlAttributes(new { @class = "btn btn-danger", @Href = "javascript:void(0)", @onclick = "showConfirmPopup()" });
        }
        if (nhap)
        {
        }
        if (xuat)
        {          
        }

    })
     .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Sortable()
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200, 300 }))
    .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .Pageable(p => p
        .Messages(m => m
            .Display("{0}-{1} của {2} dòng")
            .Empty("Không có dòng nào")
            .ItemsPerPage("dòng trên trang")
            .First("Trang kế")
            .Last("Trang tiếp")
            .Next("Đầu trang")
            .Previous("Cuối trang")
        )
    )
    .Scrollable()
    .Events(e => { e.DataBound("Databound"); })
    .Navigatable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Sort(s =>
        {
            s.Add("id");
        })
        .Batch(true)
        .PageSize(20)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .Model(model =>
        {
            model.Id(p => p.id);
            model.Field(p => p.id).Editable(false);
            model.Field(p => p.trang_thai).DefaultValue("true");
            model.Field(p => p.enable_ssl).DefaultValue(true); 
            model.Field(p => p.is_default).DefaultValue(true);
            model.Field(p => p.ngay_cap_nhat).Editable(false);
            model.Field(p => p.ngay_tao).Editable(false);
            model.Field(p => p.nguoi_tao).Editable(false);
            model.Field(p => p.nguoi_cap_nhat).Editable(false);
        })
        .Read(read => read.Action("Read", "EmailConfig"))
        .Create(read => read.Action("Create", "EmailConfig"))
        .Update(read => read.Action("Update", "EmailConfig"))
    ))
</div>

@*Popup xoa du lieu*@
<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<script>

    //resize grid
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 12);
    }

    //filter
    function filter() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };

        var text = $("#txtSearch").val();

        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "email", operator: "contains", value: text });
            filterOr.filters.push({ field: "mail_server", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }

        grid.dataSource.filter(filter);
        console.log(text)
    }

    //Xoa du lieu
    function showConfirmPopup(e) {       
        var listrowid = "";
        $('#grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            deleteId = 1;
            $("#divMaskPopup").show();
            $('#popup-confirm').modal('show');
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
        }     
    }
    function Delete() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/EmailConfig/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa dữ liệu thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
        else {
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }  

    //Add row
    function Create() {
        $("#grid").data("kendoGrid").dataSource.insert();
    }

    //Luu
    function Save() {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    }
    //Huy
    function Cancel() {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu dữ liệu thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }
        }
    }
</script>



