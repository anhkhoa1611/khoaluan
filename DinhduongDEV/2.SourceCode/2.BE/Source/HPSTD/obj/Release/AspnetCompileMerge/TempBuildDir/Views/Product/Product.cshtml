@using HDBank.Core.Entities
@{
    bool xem = ViewBag.accessDetail != null ? ViewBag.accessDetail.xem : false;
    bool sua = ViewBag.accessDetail != null ? ViewBag.accessDetail.sua : false;
    bool them = ViewBag.accessDetail != null ? ViewBag.accessDetail.them : false;
    bool xoa = ViewBag.accessDetail != null ? ViewBag.accessDetail.xoa : false;
    bool xuat = ViewBag.accessDetail != null ? ViewBag.accessDetail.xuat : false;
    bool nhap = ViewBag.accessDetail != null ? ViewBag.accessDetail.nhap : false;

    ViewBag.Title = "Danh sách hàng hóa dịch vụ";
    var newData = new Product();
    var listActive = new List<SelectListItem>
    {
        new SelectListItem{Text = "Hoạt động", Value = "true"},
        new SelectListItem{Text = "Ngưng hoạt động", Value = "false"},
    };
    ViewBag.listActive = listActive;
}
<style>
   
    .k-alt .editable {
        background-color: #C8E6C9;
        color: black;
    }

    .editable {
        background-color: #E8F5E9;
        color: black;
    }
</style>
<script src="~/Scripts/autoNumeric-min.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>

<div class="row-fluid widget-box">
    <div class="span12">

        <input type="text" id="txtSearch" class="span3" placeholder="Mã, tên hàng hóa dịch vụ, thông số kỹ thuật" onkeyup="filter()" />

        <select name="select" id="listStatus" class='chosen-select span3' data-placeholder="Trạng thái..." multiple onchange="filter()">
            <option value="true">Hoạt động </option>
            <option value="false">Ngưng hoạt động </option>
        </select>

        <select name="select" id="listNhomHHDV" class='chosen-select span6' data-placeholder="Nhóm hàng hóa dịch vụ..." multiple onchange="filter()">
            <option value=""></option>
            @foreach (var item in ViewBag.listProductCategory)
            {
                <option value="@item.ma_phan_cap">@item.ten_phan_cap</option>
            }
        </select>
    </div>
</div>

<div class="row-fluid">
    @(Html.Kendo()
    .Grid<HDBank.Core.Entities.Product>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.id)
                 .HeaderTemplate("<input type='checkbox' id= 'checkboxcheckAll'  onClick='checkAllDetail(this)' />")
                 .ClientTemplate("<input class='checkdetailid' type='checkbox' id='#=id#'/> ")
                 .Width(25).Filterable(false).Sortable(false).HtmlAttributes(new { style = "text-align:center" });
        columns.ForeignKey(p => p.loai_hang_hoa, (System.Collections.IEnumerable)ViewBag.listLoaiHangHoa, "ma_tham_so", "gia_tri").Title("Loại hàng hóa").Width(100).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ma_san_pham).Width(80).Title("Mã HHDV").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ten_san_pham).Width(200).Title("Tên hàng hóa dịch vụ").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.thong_so_ky_thuat).Width(750).Title("Thông số kỹ thuật").HtmlAttributes(new { @class = "editable" });
        columns.ForeignKey(p => p.ma_don_vi_tinh, (System.Collections.IEnumerable)ViewBag.listDonViTinh, "ma_tham_so", "gia_tri").Title("ĐVT").Width(100).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.ForeignKey(p => p.ma_nhom_san_pham, (System.Collections.IEnumerable)ViewBag.listProductCategory, "ma_phan_cap", "ten_phan_cap").Title("Thuộc nhóm").Width(250).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listActive, "Value", "Text").Title("Trạng thái").Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
        columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
    })
    .ToolBar(s =>
    {
        if (them)
        {
            s.Custom().Text("Thêm")
               .HtmlAttributes(new { @class = "btn btn-success btn-small", @Href = "javascript:void(0)", @onclick = "Create()" });
        }
        if (them || sua)
        {
            s.Custom().Text("Lưu")
                .HtmlAttributes(new { @class = "btn btn-primary btn-small", @Href = "javascript:void(0)", @onclick = "Save()" });
            s.Custom().Text("Hủy")
                .HtmlAttributes(new { @class = "btn btn-default btn-small", @Href = "javascript:void(0)", @onclick = "Cancel()" });
        }
        if (xoa)
        {
            s.Custom().Text("Xóa")
                 .HtmlAttributes(new { @class = "btn btn-danger btn-small", @Href = "javascript:void(0)", @onclick = "showConfirmPopup(1)" });
        }
        if (nhap)
        {
            s.Custom().Text("Tải Excel mẫu").HtmlAttributes(new { @class = "btn btn-primary btn-small" }).Url(Url.Action("ExportTeamplate", "Product"));
            s.Custom().Text("Nhập dữ liệu").HtmlAttributes(new { @class = "btn btn-primary btn-small", @Href = "javascript:void(0)", @onclick = "showConfirmPopupImport()" });
        }
        if (xuat)
        {
            s.Excel().Text("Xuất dữ liệu").HtmlAttributes(new { @class = "btn btn-primary btn-small" });
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Sortable()
    .Pageable(pager => pager.PageSizes(new[] { 100, 200, 300, 500 }))
    .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .Pageable(p => p
        .Messages(m => m
            .Display("{0}-{1} của {2} dòng")
            .Empty("Không có dòng nào")
            .ItemsPerPage("dòng trên trang")
            .First("Trang kế")
            .Last("Trang tiếp")
            .Next("Đầu trang")
            .Previous("Cuối trang")
        )
    )
    .Scrollable()
    .Events(e => { e.DataBound("Databound"); })
    .Navigatable()
    .Excel(excel => excel
        .FileName("ProductList.xlsx")
        .Filterable(true).AllPages(true)
        .ProxyURL(Url.Action("Excel_Export", "Product"))
     )
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Sort(s =>
        {
            s.Add("ma_san_pham");
        })
        .Batch(true)
        .PageSize(100)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .Model(model =>
        {
            model.Id(p => p.id);
            model.Field(p => p.id).Editable(false);
            model.Field(p => p.trang_thai).DefaultValue("true");
            model.Field(p => p.ngay_cap_nhat).Editable(false);
            model.Field(p => p.ngay_tao).Editable(false);
            model.Field(p => p.nguoi_tao).Editable(false);
            model.Field(p => p.nguoi_cap_nhat).Editable(false);
        })
        .Read(read => read.Action("Read", "Product"))
        .Create(read => read.Action("Create", "Product"))
        .Update(read => read.Action("Update", "Product"))
   ))
</div>

<div id="popup-confirm2" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu?</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>

<div id="popup-import" class="modal hide">
    <form action="~/Product/Import" method="post" id="importForm" enctype="multipart/form-data" class="form-inline" style="margin:0px">
        <div class="k-window-titlebar k-header">
            <span class="k-window-title">Thông báo</span>
            @*<button type="button" class="btclose" data-dismiss="modal">&times;</button>*@
        </div>
        <div class="modal-body overflow-visible">
            <div class="row-fluid form-horizontal">
                <input name="FileUpload" type="file" id="FileUpload" />
                <label>Chọn file </label>
            </div>
        </div>
        <div class="modal-footer">
            <a class="btn btn-info btn-small" onclick="Import()"> Đồng ý</a>
            <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
        </div>
    </form>
</div>

<script>
    $("#listStatus").chosen();
    $("#listNhomHHDV").chosen();

    //resize grid
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 12);
    }

    //Chon du lieu
    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkdetailid").each(function () {
            $(this).prop('checked', x);
        });
    }

    //Confirm delete
    function showConfirmPopup(e) {
        if (e == 1) {
            var listrowid = "";
            $('#grid').find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                deleteId = 1;
                $("#divMaskPopup").show();
                $('#popup-confirm2').modal('show');
            }
            else {
                $.gritter.add({
                    title: '',
                    text: 'Vui lòng chọn dữ liệu muốn xóa',
                    class_name: 'gritter-error'
                });
            }
        }
    }

    function Delete() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkdetailid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/Product/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa dữ liệu thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm2').modal('hide');
                });
            }
        }
        else {
        }
    }

    //search
    function filter() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ma_san_pham", operator: "contains", value: text });
            filterOr.filters.push({ field: "ten_san_pham", operator: "contains", value: text });
            filterOr.filters.push({ field: "thong_so_ky_thuat", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }

        var listStatus = $("#listStatus option:selected");
        var fillterStatus = { logic: "or", filters: [] };
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var option = listStatus[i].value;
                if (option != '') {
                    fillterStatus.filters.push({ field: "trang_thai", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterStatus);
        }

        var listnhomhhdv = $("#listNhomHHDV option:selected");
        var fillternhomhhdv = { logic: "or", filters: [] };
        if (listnhomhhdv.length > 0) {
            for (var i = 0; i < listnhomhhdv.length; i++) {
                var option = listnhomhhdv[i].value;
                if (option != '') {
                    fillternhomhhdv.filters.push({ field: "ma_nhom_san_pham", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillternhomhhdv);
        }

        grid.dataSource.filter(filter);
        console.log(text)
    }
    function Create() {
        $("#grid").data("kendoGrid").dataSource.insert();
    }
    function Save() {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu dữ liệu thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }

        }
    }
</script>

@* Import *@
<script>
    $(document).ready(function () {
        $('#FileUpload').ace_file_input({
            no_file: 'Chưa chọn tập tin ...',
            btn_choose: 'Chọn',
            btn_change: 'Thay đổi',
            droppable: false,
            onchange: null,
            thumbnail: false, //| true | large
            allowExt: ['gif', 'png', 'jpg', 'jpeg', 'xlsx', 'xls', 'doc', 'docx', 'pdf'],
            denyExt: ['exe', 'php'],
            maxSize: 5120000,
            //onchange:''
            before_change: function (files, dropped) {
                var allowed_files = [];
                for (var i = 0 ; i < files.length; i++) {
                    var file = files[i];
                    if (typeof file === "string") {
                        //IE8 and browsers that don't support File Object
                        if (!(/\.(xlsx|xls)$/i).test(file))
                            //if (!(/\.(jpe?g|png|gif|bmp|doc|docx|xlsx|xls|pdf)$/i).test(file))
                            return false;
                    }
                    else {
                        var type = $.trim(file.type);
                        var isValidLength = type.length > 0;
                        var isApplication = (/^application\/(pdf|msword|vnd.openxmlformats-officedocument.spreadsheetml.sheet)$/i).test(type);
                        //var isValidFileName = (/\.(jpe?g|png|gif|bmp|doc|docx|xlsx|xls|pdf)$/i).test(file.name);
                        var isValidFileName = (/\.(xlsx|xls)$/i).test(file.name);
                        //var isImage = (/^image\/(jpe?g|png|gif|bmp)$/i).test(type);
                        if (isValidLength) {
                            if (!isApplication && !isValidFileName) {
                                alert('Sai định dạng file(*.xlsx,*.xls): ' + file.name);
                                continue;
                            }
                        } else {
                            continue;
                        }
                    }

                    allowed_files.push(file);
                }
                if (allowed_files.length === 0) return false;
                return allowed_files;
            }
        });
    });
   
    function showConfirmPopupImport(e) {
        $('#popup-import').modal('show');
    }
    function Import() {
        $('#importForm').submit();
    }  

    function onCloseForm() {
        $('#txtcontent').val('');
        $('.modal').modal('hide');
    }
    $("#importForm").validate({
        submitHandler: function (form) {
            $("#importForm").ajaxSubmit({
                uploadProgress: function (event, position, total, percentComplete) { },
                success: function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        if (data.totalError > 0) {
                            $.gritter.add({
                                title: 'Lỗi',
                                text: "Có dòng lỗi, tải về để sửa lại.",
                                class_name: 'gritter-error'
                            });
                            window.open(r + "/ExcelImport/" + data.link, "_blank");
                        }
                        else {
                            $.gritter.add({
                                title: '',
                                text: "Nhập thành công " + data.total + " trang",
                                class_name: 'gritter-success',
                                button: 'zzz'
                            });
                        }
                        $('#FileUpload').ace_file_input('reset_input');
                    } else {
                        $.gritter.add({
                            title: '',
                            text: "Báo lỗi " + data.message,
                            class_name: 'gritter-error',
                            button: 'zzz'
                        });
                    }
                    onCloseForm();
                }
            });
        },
    });
</script>

