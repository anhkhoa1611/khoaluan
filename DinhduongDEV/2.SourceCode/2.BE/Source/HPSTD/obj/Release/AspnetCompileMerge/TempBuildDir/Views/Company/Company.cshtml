@using HDBank.Core.Entities;
@{
    bool xem = ViewBag.accessDetail != null ? ViewBag.accessDetail.xem : false;
    bool sua = ViewBag.accessDetail != null ? ViewBag.accessDetail.sua : false;
    bool them = ViewBag.accessDetail != null ? ViewBag.accessDetail.them : false;
    bool xoa = ViewBag.accessDetail != null ? ViewBag.accessDetail.xoa : false;
    bool xuat = ViewBag.accessDetail != null ? ViewBag.accessDetail.xuat : false;
    bool nhap = ViewBag.accessDetail != null ? ViewBag.accessDetail.nhap : false;

    ViewBag.Title = "Thông tin công ty";

    var listActive = new List<SelectListItem>
    {
    new SelectListItem{Text = "Hoạt động", Value = "true"},
    new SelectListItem{Text = "Ngưng hoạt động", Value = "false"},
    };

    ViewBag.listActive = listActive;
    var newData = new Company();
}

<style>
    .k-alt .editable {
        background-color: #C8E6C9;
        color: black;
    }

    .editable {
        background-color: #E8F5E9;
        color: black;
    }
</style>

<div class="row-fluid widget-box">
    <div class="span12">

        <input type="text" id="txtSearch" class="span3" placeholder="Tên công ty, số điện thoại, email" onkeyup="filter()" />

        <select name="select" id="listStatus" class='chosen-select span3' data-placeholder="Trạng thái..." multiple onchange="filter()">
            <option value="true">Hoạt động </option>
            <option value="false">Ngưng hoạt động </option>
        </select>
    </div>
</div>
<div class="row-fluid">
    @(Html.Kendo()
    .Grid<HDBank.Core.Entities.Company>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.id)
              .HeaderTemplate("<input type='checkbox' id= 'checkboxcheckAll'  onClick='checkAllDetail(this)' />")
              .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=id#'/> ")
              .Width(25).Filterable(false).Sortable(false).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(p => p.ten_cong_ty).Width(150).Title("Tên công ty").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.so_dien_thoai).Width(110).Title("Điện thoại").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.dia_chi).Width(350).Title("Địa chỉ").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.email).Width(150).Title("Email").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.fax).Width(110).Title("Fax").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.website).Width(200).Title("Website").HtmlAttributes(new { @class = "editable" });
        columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listActive, "Value", "Text").Title("Trạng thái").Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ghi_chu).Width(200).Title("Ghi chú").HtmlAttributes(new { @class = "editable" });
        columns.Bound(p => p.ngay_tao).Title("Ngày tạo").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_tao).Title("Người tạo").Filterable(false).Width(90);
        columns.Bound(p => p.ngay_cap_nhat).Title("Ngày sửa").Filterable(false).Width(120).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
        columns.Bound(p => p.nguoi_cap_nhat).Title("Người sửa").Filterable(false).Width(90);
    })
    .ToolBar(s =>
    {
        if (them)
        {
            s.Custom().Text("Thêm")
               .HtmlAttributes(new { @class = "btn btn-success btn-small", @Href = "javascript:void(0)", @onclick = "Create()" });
        }
        if (them || sua)
        {
            s.Custom().Text("Lưu")
                .HtmlAttributes(new { @class = "btn btn-primary btn-small", @Href = "javascript:void(0)", @onclick = "Save()" });
            s.Custom().Text("Hủy")
                .HtmlAttributes(new { @class = "btn btn-default btn-small", @Href = "javascript:void(0)", @onclick = "Cancel()" });
        }
        if (xoa)
        {
            s.Custom().Text("Xóa")
                 .HtmlAttributes(new { @class = "btn btn-danger btn-small", @Href = "javascript:void(0)", @onclick = "showConfirmPopup()" });
        }
        if (nhap)
        {
        }
        if (xuat)
        {
        }
    })
    .Sortable()
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200, 300 }))
    .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .Pageable(p => p
        .Messages(m => m
                .Display("{0}-{1} của {2} dòng")
                .Empty("Không có dòng nào")
                .ItemsPerPage("dòng trên trang")
                .First("Trang kế")
                .Last("Trang tiếp")
                .Next("Đầu trang")
                .Previous("Cuối trang")
        )
    )
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Scrollable()
    .Events(e => { e.DataBound("Databound"); })
    .Navigatable()
            //.Excel(excel => excel
            //    .FileName("CompanyList.xlsx")
            //    .Filterable(true).AllPages(true)
            //    .ProxyURL(Url.Action("Excel_Export", "Company"))
            // )
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Sort(s =>
        {
            s.Add("id");
        })
        .Batch(true)
        .PageSize(20)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .Model(model =>
        {
            model.Id(p => p.id);
            model.Field(p => p.id).Editable(false);
            model.Field(p => p.trang_thai).DefaultValue("true");
            model.Field(p => p.ngay_cap_nhat).Editable(false);
            model.Field(p => p.ngay_tao).Editable(false);
            model.Field(p => p.nguoi_tao).Editable(false);
            model.Field(p => p.nguoi_cap_nhat).Editable(false);
        })
        .Read(read => read.Action("Read", "Company"))
        .Create(read => read.Action("Create", "Company"))
        .Update(read => read.Action("Update", "Company"))
    ))
</div>

<div id="popup-confirm" class="modal hide">
    <div class="k-window-titlebar k-header">
        <span class="k-window-title">Thông báo</span>
    </div>
    <div class="modal-body overflow-visible">
        <div class="row-fluid form-horizontal">
            <p>
                <span>Bạn có chắc chắn muốn xóa dữ liệu?</span>
            </p>
        </div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-info btn-small" onclick="Delete()"> Đồng ý</a>
        <a class="btn btn-default btn-small" data-dismiss="modal">Bỏ qua</a>
    </div>
</div>
<script>
    $("#listStatus").chosen();

    //resize grid
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
            dataArea = gridElement.find(".k-grid-content"),
            otherElements = gridElement.children().not(".k-grid-content"),
            otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 12);
    }

    //Chon du lieu
    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    //Confirm delete
    function showConfirmPopup() {
        var listrowid = "";
        $('#grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            deleteId = 1;
            $("#divMaskPopup").show();
            $('#popup-confirm').modal('show');
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Vui lòng chọn dữ liệu muốn xóa',
                class_name: 'gritter-error'
            });
        }       
    }

    function Delete() {
        if (deleteId == 1) {
            var listrowid = "";
            $('#grid').find(".checkrowid").each(function () {
                if ($(this).prop('checked') == true) {
                    listrowid += $(this).attr("id") + '@@@@';
                }
            });
            if (listrowid != "" && listrowid != null) {
                $.post(r + "/Company/DeleteList", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Xóa dữ liệu thành công",
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                    $('#popup-confirm').modal('hide');
                });
            }
        }
        else {
        }
    }
    //search
    function filter() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();

        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ten_cong_ty", operator: "contains", value: text });
            filterOr.filters.push({ field: "so_dien_thoai", operator: "contains", value: text });
            filterOr.filters.push({ field: "email", operator: "contains", value: text });          
            filter.filters.push(filterOr);
        }

        var listStatus = $("#listStatus option:selected");
        var fillterStatus = { logic: "or", filters: [] };
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var option = listStatus[i].value;
                if (option != '') {
                    fillterStatus.filters.push({ field: "trang_thai", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterStatus);
        }

        grid.dataSource.filter(filter);
        console.log(text)
    }

    function Create() {
        $("#grid").data("kendoGrid").dataSource.insert();
    }
    function Save() {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (!e.response.Errors) {
                $.gritter.add({
                    title: '',
                    text: 'Lưu dữ liệu thành công',
                    class_name: 'gritter-success'
                });
                $("#grid").data("kendoGrid").dataSource.read()
            }
        }
    }

    function Active() {
        var checkrowid = "";
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid += $(this).attr("id") + "@@@@";
            }
        });
        if (checkrowid != null && checkrowid != "") {
            var cf = confirm("Are you sure you want to Active this record");
            if (cf == true) {
                $.post(r + "/Company/Active", { data: checkrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Active successfully " + data.message + " records!",
                            class_name: 'gritter-success',
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                        $("#checkboxcheckAll").prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error',
                        });

                    }
                });
            }
            else {
                return false;
            }
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
        }
    }
    function Inactive() {
        var checkrowid = "";
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid += $(this).attr("id") + "@@@@";
            }
        });
        if (checkrowid != null && checkrowid != "") {
            var cf = confirm("Are you sure you want to inactive this record");
            if (cf == true) {
                $.post(r + "/Company/Inactive", { data: checkrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Inactive successfully " + data.message + " records!",
                            class_name: 'gritter-success',
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                        $("#checkboxcheckAll").prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error',
                        });

                    }
                });
            }
            else {
                return false;
            }
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
        }
    }
</script>
